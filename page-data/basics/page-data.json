{"componentChunkName":"component---src-templates-blog-post-js","path":"/basics","result":{"data":{"markdownRemark":{"rawMarkdownBody":"\n# Python Basics\n\n> A Byte of Python Syntax\n\nWelcome to CIS 192! Python is often though of as one of the most beginner-friendly programming languages, and in the upcoming few lectures, I hope to convince you of this.\n\nIn this lecture, we will be covering:\n\n1. The History of Python\n2. Running Python\n3. Primitive Variables\n4. Control Flow (loops, functions etc.)\n\nBefore you get started, be sure to [install Python 3.0 here](https://www.python.org/downloads/). We will use Python 3.0 exclusively in this class, so make sure that your Python installation is up to date!\n\n## About Python\n\nPython is an **object-oriented, dynamically-typed, interpreted** programming language that was first published in 1991 by a man named Guido van Rossum. The language was inspired by a general purpose programming language named ABC, which he worked on in the late 1980s. Guido wanted to develop a lightweight and simple scripting language that would appeal to Unix hackers and C programmers, who would benefit from a higher level language. Fun fact: the language is actually named after [Monty Python](https://en.wikipedia.org/wiki/Monty_Python), not the snake!\n\nPython 1.0 was released in 1994, and featured functional programming paradigms such as map, filter and reduce (which we will learn later in the course). Soon, Python 2.0 was released in 2000, which heralded garbage collection (really huge functionality) as well as list comprehensions (everybody's favourite Python syntax). In 2008, Python 3.0 was released, which gave rise to more Python-specific constructs such as iterators and slightly more rigid syntax (e.g. `print` being a function, cleaning up datatypes etc).\n\nPython as a programming language has its own mantra that's baked into every installation, which creates almost a cult-like essence. Running `import this` in a Python terminal gives you:\n\n```\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one -- and preferably only one -- obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```\n\nPython is simple, and excels in virtually every area of computer science. Although Python isn't very performance focused, there are many ways to gain performance boosts by compiling to C as opposed to being interpreted by the Python interpreter. In fact, the reason why modern machine learning (which is extremely computationally intensive) is written in Python is exactly because of this compilation trick.\n\n## Command-Line Interpreter\n\nEver wanted a chatbot that worked flawlessly in the terminal? Look no further - turns out, there is a powerful chatbot bundled with every installation of Python. The catch, as you could imagine, is that _it only speaks Python_. What do I mean by this? Open your terminal and run the following command:\n\n```\npython3\n```\n\nYou should see something like the following:\n\n```\nPython 3.7.4 (default, Jul  9 2019, 18:13:23)\n[Clang 10.0.1 (clang-1001.0.46.4)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n>>>\n```\n\nNow if we type some Python into this \"chatbot\", we can expect a _perfect_ Python response from it. For example, inputting `print(\"hello world\")` gives us:\n\n```\n>>> print(\"hello world\")\nhello world\n```\n\nI call this a chatbot, because when we want to debug certain behaviour of Python's language, we turn to this **[interpreter](https://docs.python.org/3.7/tutorial/interpreter.html)** to give us insight into the language. In previous courses at Penn, we ran languages like Java from an IDE. However, in this course we will get very familiar with the command line by exclusively using it!\n\nWe can actually run any Python code from the interpreter, like simple arithmetic:\n\n```\n>>> print(6 + 2)\n8\n```\n\nWe can even create bugs and crash our code in the interpreter, just like with any other environment:\n\n```\n>>> print(10 / 0)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n```\n\nBut, more on actual Python syntax later in this lecture.\n\n## Running Scripts in the Command Line\n\nSo the command-line interpreter is pretty great, but as _real_ programmers we want to create files that we can run over and over again, as well as move around cyberspace. Let's learn some basic Unix commands for doing this. In your terminal, you should see what folder you currently are in (most likely your computer's root directory).\n\nFirst, run `ls` in your terminal to **list contents** of the current directory. This is good for some developmental awareness of your current working environment. Next, run `mkdir lecture1` to **create a folder** named `lecture1` in your current directory. Then, run `cd lecture1` to **change directory** into `lecture1`. Finally, we'll run `touch lecture1.py` to **create a file** named `lecture1.py`, which has the valid `.py` extension for our Python interpreter to run the file appropriately. We can now do a little command-line trick and run:\n\n```\necho 'print(\"hello world\")' >> lecture1.py\n```\n\nwhich \"writes\" `print(\"hello world\")` to `lecture1.py`. Now, if we run `cat lecture1.py`, we should be able to **view contents** of the file.\n\nLast but not least, we can run `python3 lecture1.py` to see our canonical message displayed to us. These are all very handy Unix commands, which make you a better/faster programmer. However, since it's only the first lecture, feel free to use a text editor such as [Sublime Text](https://www.sublimetext.com/) or [Visual Studio Code](https://code.visualstudio.com/) (recommended) to write all your homework in, running `python3` to execute the file as before.\n\n## Python Syntax\n\nNotice in our current `lecture1.py`:\n\n```python\nprint(\"hello world\")\n```\n\nthe Python code is very minimal. Compare this with a less civilized language like Java:\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"This will be printed\");\n    }\n}\n```\n\nWe have no curly braces, explicit class definitions, or semi-colons. These things are little quality of life adjustments for us, and we'll learn to thank the Python designers for this.\n\nSo how do we nest our code, and delineate the end of a line? Python uses **whitespace** as punctuation. For example, each line represents a command (the implicit `\\n` token ends each line for us) and we'll come to see that _indented code_ represents different levels of nesting. So although it's true that Python can look a lot like English, your code could crash due a single extra space character. However, this is a pretty good tradeoff since these errors can be caught by the intrepreter and are easy to fix (as well as easy on the eyes).\n\nAnother quick note is that comments in Python are written either using a `#` token for a single-line comment, or using `\"\"\"` for multi-line comments:\n\n```python\ncode()\n# a single line comment!\nmore_code()\n\"\"\"\na multi\nline\ncomment\n\"\"\"\ncode()\n```\n\n## Variables\n\nLet's actually write some Python code in our newly created `lecture1.py` file. We showed before that we could print `6 + 8`, but what if this was a long formula? It's best to save this into its own variable. Turns out, in Python we can do this very easily:\n\n```python\nx = 6 + 8\n```\n\nNo type definition necessary! Does this mean Python doesn't have any types? NO! It means that Python is something known as a **dynamically typed** language, which infers types at runtime. This is different from a statically typed language like C or Java, which will vomit errors before you even run your code. This means that developing in Python is clean and straightforward, but bad code hygiene can make programming in Python a nightmare.\n\nAs you can imagine, `6 + 8` gives us an `int`. But the `print()` function actually takes a `string` as input. Here we have a good example of casting, where Python will actually do some nice type inferring for us, to make us do less work than in a language like Java (boo).\n\nWe can define strings similarly:\n\n```python\nmessage = \"hello world\"\n```\n\nWe can even redefine our variables immediately after:\n\n```python\nmessage = \"hello world\"\nmessage = \"hello universe\"\n```\n\nwithout syntactic repercussions.\n\n### Casting\n\nCasting a variable to another data-type has pretty straightforward syntax. For example, casting an integer to a string is done by calling `str()` on a value:\n\n```python\nthirteen_string = str(6 + 7)\n```\n\nAnd converting back to an integer is similar as well:\n\n```python\nthirteen = int(thirteen_string)\n```\n\nBut since Python is a dynamically typed language, usually you don't have to write many casting statements since we can let the interpreter do the difficult work for us in figuring out which variables are which type.\n\n## Control Flow\n\nWe could write a long sequence of variable assignments and printing, but sometimes we want to exact different behaviour of our program depending on our state.\n\n### If Statements\n\nLet's look at the most simple form of control flow: the classic [if-statement](https://docs.python.org/3.7/tutorial/controlflow.html#if-statements). In Python this is very straight forward:\n\n```python\nx = 4\n\nif x > 4:\n    print(\"x is greater than 4\")\nelif x < 4:\n    print(\"x is less than 4\")\nelse:\n    print(\"i guess x is exactly 4\")\n```\n\nWe use a `:` token after the condition to indicate that the following line will by indented, representing a nested piece of code. Once again, notice the lack of brackets around the condition, as well as the `elif` command (as opposed to an `else if` delineation).\n\nIf you wanted to be even more compact (or blasphemous, depending on how you look at it), you could even compress each clause into a single command:\n\n```python\nx = 4\n\nif x > 4: print(\"x is greater than 4\")\nelif x < 4: print(\"x is less than 4\")\nelse: print(\"i guess x is exactly 4\")\n```\n\nSometimes, this compressed code is easier to read and helps the reader see symmetry in the logic. However, this is usually a bad idea because it can make the code feel cluttered.\n\n### While Loop\n\nA [while loop](https://docs.python.org/3.7/reference/compound_stmts.html#while) is similar to an if statement, with its use of a condition that controls the flow of code. For example:\n\n```python\ncounter = 0\n\nwhile counter < 10:\n    print(\"counter is less than 10\")\n    counter += 1\n```\n\nThis will have the program print `\"counter is less than 10\"` ten times. Again, notice the simple definition of the condition, the `:` token, and the indentation. Again, indentation is VERY important in Python!\n\nLike with other languages, we can get even more specific with the loop behaviour with the [`continue`](https://docs.python.org/3.7/reference/simple_stmts.html#the-continue-statement) and [`break`](https://docs.python.org/3.7/reference/simple_stmts.html#the-break-statement) constructs. The `continue` token will cause the program to restart the loop when encountered, whereas the `break` token will completely exit the entire loop. These can be useful if, for example, we wanted to emulate a do-while loop in Python (which isn't natively supported):\n\n```python\nwhile True:\n  # do things\n  if False:\n    break\n```\n\n### For Loop\n\nYou might have noticed that the previous bit of code is essentially executing a [for loop](https://docs.python.org/3.7/tutorial/controlflow.html#for-statements), a special case of a while loop where we have an explicit update step and condition. An identical implementation of the previous counter would look like:\n\n```python\nfor counter in range(10):\n    print(\"counter is less than 10\")\n```\n\nWhat does the [`range()`](https://docs.python.org/3.7/tutorial/controlflow.html#the-range-function) function do? It returns a `range` object, which is an iterable. We'll expand on what this means later, but for now it just gives us an object that contains the integers between 0 and 9 that we can iterate over. Although there is no explicit condition in the for loop, we can see that the loop terminates when there are no more elements left in the `range` object to iterate over.\n\nThere is a lot of nuance that we can gain from the for loop, and we will expand upon this in later sections.\n\n### Functions\n\nThe final piece of control flow is [functions](https://docs.python.org/3.7/tutorial/controlflow.html#defining-functions). As with for loops, there is a TON of nuance in implementing functions in Python, so for now, we'll stick with the basics.\n\nDefining a function is done using the `def` keyword:\n\n```python\ndef add_one(n):\n    return n + 1\n```\n\nNotice the lack of a return type. Although running `add_one(4)` will return us 5, it's still possible to have a \"void\" type that returns \"null\":\n\n```python\n# standby, doing nothing\ndef do_nothing():\n    pass\n```\n\nSaving this return value to a variable (e.g. `x = do_nothing()`) will give us a `None` value, which is Python's version of \"null\". Since Python supports functional paradigms, I'll blow your mind with the notion that functions are actually objects in Python, same as integers, `None`, and custom `Koala` objects. Weird stuff that we will return to.\n\n## Conclusion\n\nThis is enough Python syntax to get you started, and at the very least will let you identify Python code in the wild. For loops and functions in Python are particularly weird since they contain a lot of power baked into them. More on them in the later lectures!\n\n---\n\n### References\n\n1. [python-course.eu](https://www.python-course.eu/python3_history_and_philosophy.php)\n2. [Interpreter - Python Docs](https://docs.python.org/3.7/tutorial/interpreter.html)\n3. [If-statements - Python Docs](https://docs.python.org/3.7/tutorial/controlflow.html#if-statements)\n4. [While-loop - Python Docs](https://docs.python.org/3.7/reference/compound_stmts.html#while)\n5. [Continue statement - Python Docs](https://docs.python.org/3.7/reference/simple_stmts.html#the-continue-statement)\n6. [Break statement - Python Docs](https://docs.python.org/3.7/reference/simple_stmts.html#the-break-statement)\n7. [For-statements - Python Docs](https://docs.python.org/3.7/tutorial/controlflow.html#for-statements)\n8. [Range function - Python Docs](https://docs.python.org/3.7/tutorial/controlflow.html#the-range-function)\n9. [Functions - Python Docs](https://docs.python.org/3.7/tutorial/controlflow.html#defining-functions)\n","html":"<h1>Python Basics</h1>\n<blockquote>\n<p>A Byte of Python Syntax</p>\n</blockquote>\n<p>Welcome to CIS 192! Python is often though of as one of the most beginner-friendly programming languages, and in the upcoming few lectures, I hope to convince you of this.</p>\n<p>In this lecture, we will be covering:</p>\n<ol>\n<li>The History of Python</li>\n<li>Running Python</li>\n<li>Primitive Variables</li>\n<li>Control Flow (loops, functions etc.)</li>\n</ol>\n<p>Before you get started, be sure to <a href=\"https://www.python.org/downloads/\">install Python 3.0 here</a>. We will use Python 3.0 exclusively in this class, so make sure that your Python installation is up to date!</p>\n<h2>About Python</h2>\n<p>Python is an <strong>object-oriented, dynamically-typed, interpreted</strong> programming language that was first published in 1991 by a man named Guido van Rossum. The language was inspired by a general purpose programming language named ABC, which he worked on in the late 1980s. Guido wanted to develop a lightweight and simple scripting language that would appeal to Unix hackers and C programmers, who would benefit from a higher level language. Fun fact: the language is actually named after <a href=\"https://en.wikipedia.org/wiki/Monty_Python\">Monty Python</a>, not the snake!</p>\n<p>Python 1.0 was released in 1994, and featured functional programming paradigms such as map, filter and reduce (which we will learn later in the course). Soon, Python 2.0 was released in 2000, which heralded garbage collection (really huge functionality) as well as list comprehensions (everybody's favourite Python syntax). In 2008, Python 3.0 was released, which gave rise to more Python-specific constructs such as iterators and slightly more rigid syntax (e.g. <code class=\"language-text\">print</code> being a function, cleaning up datatypes etc).</p>\n<p>Python as a programming language has its own mantra that's baked into every installation, which creates almost a cult-like essence. Running <code class=\"language-text\">import this</code> in a Python terminal gives you:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren&#39;t special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one -- and preferably only one -- obvious way to do it.\nAlthough that way may not be obvious at first unless you&#39;re Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it&#39;s a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let&#39;s do more of those!</code></pre></div>\n<p>Python is simple, and excels in virtually every area of computer science. Although Python isn't very performance focused, there are many ways to gain performance boosts by compiling to C as opposed to being interpreted by the Python interpreter. In fact, the reason why modern machine learning (which is extremely computationally intensive) is written in Python is exactly because of this compilation trick.</p>\n<h2>Command-Line Interpreter</h2>\n<p>Ever wanted a chatbot that worked flawlessly in the terminal? Look no further - turns out, there is a powerful chatbot bundled with every installation of Python. The catch, as you could imagine, is that <em>it only speaks Python</em>. What do I mean by this? Open your terminal and run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python3</code></pre></div>\n<p>You should see something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Python 3.7.4 (default, Jul  9 2019, 18:13:23)\n[Clang 10.0.1 (clang-1001.0.46.4)] on darwin\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n\n&gt;&gt;&gt;</code></pre></div>\n<p>Now if we type some Python into this \"chatbot\", we can expect a <em>perfect</em> Python response from it. For example, inputting <code class=\"language-text\">print(&quot;hello world&quot;)</code> gives us:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;&gt;&gt; print(&quot;hello world&quot;)\nhello world</code></pre></div>\n<p>I call this a chatbot, because when we want to debug certain behaviour of Python's language, we turn to this <strong><a href=\"https://docs.python.org/3.7/tutorial/interpreter.html\">interpreter</a></strong> to give us insight into the language. In previous courses at Penn, we ran languages like Java from an IDE. However, in this course we will get very familiar with the command line by exclusively using it!</p>\n<p>We can actually run any Python code from the interpreter, like simple arithmetic:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;&gt;&gt; print(6 + 2)\n8</code></pre></div>\n<p>We can even create bugs and crash our code in the interpreter, just like with any other environment:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;&gt;&gt; print(10 / 0)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nZeroDivisionError: division by zero</code></pre></div>\n<p>But, more on actual Python syntax later in this lecture.</p>\n<h2>Running Scripts in the Command Line</h2>\n<p>So the command-line interpreter is pretty great, but as <em>real</em> programmers we want to create files that we can run over and over again, as well as move around cyberspace. Let's learn some basic Unix commands for doing this. In your terminal, you should see what folder you currently are in (most likely your computer's root directory).</p>\n<p>First, run <code class=\"language-text\">ls</code> in your terminal to <strong>list contents</strong> of the current directory. This is good for some developmental awareness of your current working environment. Next, run <code class=\"language-text\">mkdir lecture1</code> to <strong>create a folder</strong> named <code class=\"language-text\">lecture1</code> in your current directory. Then, run <code class=\"language-text\">cd lecture1</code> to <strong>change directory</strong> into <code class=\"language-text\">lecture1</code>. Finally, we'll run <code class=\"language-text\">touch lecture1.py</code> to <strong>create a file</strong> named <code class=\"language-text\">lecture1.py</code>, which has the valid <code class=\"language-text\">.py</code> extension for our Python interpreter to run the file appropriately. We can now do a little command-line trick and run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo &#39;print(&quot;hello world&quot;)&#39; &gt;&gt; lecture1.py</code></pre></div>\n<p>which \"writes\" <code class=\"language-text\">print(&quot;hello world&quot;)</code> to <code class=\"language-text\">lecture1.py</code>. Now, if we run <code class=\"language-text\">cat lecture1.py</code>, we should be able to <strong>view contents</strong> of the file.</p>\n<p>Last but not least, we can run <code class=\"language-text\">python3 lecture1.py</code> to see our canonical message displayed to us. These are all very handy Unix commands, which make you a better/faster programmer. However, since it's only the first lecture, feel free to use a text editor such as <a href=\"https://www.sublimetext.com/\">Sublime Text</a> or <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> (recommended) to write all your homework in, running <code class=\"language-text\">python3</code> to execute the file as before.</p>\n<h2>Python Syntax</h2>\n<p>Notice in our current <code class=\"language-text\">lecture1.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>the Python code is very minimal. Compare this with a less civilized language like Java:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This will be printed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have no curly braces, explicit class definitions, or semi-colons. These things are little quality of life adjustments for us, and we'll learn to thank the Python designers for this.</p>\n<p>So how do we nest our code, and delineate the end of a line? Python uses <strong>whitespace</strong> as punctuation. For example, each line represents a command (the implicit <code class=\"language-text\">\\n</code> token ends each line for us) and we'll come to see that <em>indented code</em> represents different levels of nesting. So although it's true that Python can look a lot like English, your code could crash due a single extra space character. However, this is a pretty good tradeoff since these errors can be caught by the intrepreter and are easy to fix (as well as easy on the eyes).</p>\n<p>Another quick note is that comments in Python are written either using a <code class=\"language-text\">#</code> token for a single-line comment, or using <code class=\"language-text\">&quot;&quot;&quot;</code> for multi-line comments:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">code<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># a single line comment!</span>\nmore_code<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\na multi\nline\ncomment\n\"\"\"</span>\ncode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Variables</h2>\n<p>Let's actually write some Python code in our newly created <code class=\"language-text\">lecture1.py</code> file. We showed before that we could print <code class=\"language-text\">6 + 8</code>, but what if this was a long formula? It's best to save this into its own variable. Turns out, in Python we can do this very easily:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span></code></pre></div>\n<p>No type definition necessary! Does this mean Python doesn't have any types? NO! It means that Python is something known as a <strong>dynamically typed</strong> language, which infers types at runtime. This is different from a statically typed language like C or Java, which will vomit errors before you even run your code. This means that developing in Python is clean and straightforward, but bad code hygiene can make programming in Python a nightmare.</p>\n<p>As you can imagine, <code class=\"language-text\">6 + 8</code> gives us an <code class=\"language-text\">int</code>. But the <code class=\"language-text\">print()</code> function actually takes a <code class=\"language-text\">string</code> as input. Here we have a good example of casting, where Python will actually do some nice type inferring for us, to make us do less work than in a language like Java (boo).</p>\n<p>We can define strings similarly:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span></code></pre></div>\n<p>We can even redefine our variables immediately after:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span>\nmessage <span class=\"token operator\">=</span> <span class=\"token string\">\"hello universe\"</span></code></pre></div>\n<p>without syntactic repercussions.</p>\n<h3>Casting</h3>\n<p>Casting a variable to another data-type has pretty straightforward syntax. For example, casting an integer to a string is done by calling <code class=\"language-text\">str()</code> on a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">thirteen_string <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And converting back to an integer is similar as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">thirteen <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>thirteen_string<span class=\"token punctuation\">)</span></code></pre></div>\n<p>But since Python is a dynamically typed language, usually you don't have to write many casting statements since we can let the interpreter do the difficult work for us in figuring out which variables are which type.</p>\n<h2>Control Flow</h2>\n<p>We could write a long sequence of variable assignments and printing, but sometimes we want to exact different behaviour of our program depending on our state.</p>\n<h3>If Statements</h3>\n<p>Let's look at the most simple form of control flow: the classic <a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#if-statements\">if-statement</a>. In Python this is very straight forward:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n<span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is greater than 4\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is less than 4\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i guess x is exactly 4\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We use a <code class=\"language-text\">:</code> token after the condition to indicate that the following line will by indented, representing a nested piece of code. Once again, notice the lack of brackets around the condition, as well as the <code class=\"language-text\">elif</code> command (as opposed to an <code class=\"language-text\">else if</code> delineation).</p>\n<p>If you wanted to be even more compact (or blasphemous, depending on how you look at it), you could even compress each clause into a single command:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n<span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is greater than 4\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is less than 4\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i guess x is exactly 4\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sometimes, this compressed code is easier to read and helps the reader see symmetry in the logic. However, this is usually a bad idea because it can make the code feel cluttered.</p>\n<h3>While Loop</h3>\n<p>A <a href=\"https://docs.python.org/3.7/reference/compound_stmts.html#while\">while loop</a> is similar to an if statement, with its use of a condition that controls the flow of code. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">while</span> counter <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"counter is less than 10\"</span><span class=\"token punctuation\">)</span>\n    counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>This will have the program print <code class=\"language-text\">&quot;counter is less than 10&quot;</code> ten times. Again, notice the simple definition of the condition, the <code class=\"language-text\">:</code> token, and the indentation. Again, indentation is VERY important in Python!</p>\n<p>Like with other languages, we can get even more specific with the loop behaviour with the <a href=\"https://docs.python.org/3.7/reference/simple_stmts.html#the-continue-statement\"><code class=\"language-text\">continue</code></a> and <a href=\"https://docs.python.org/3.7/reference/simple_stmts.html#the-break-statement\"><code class=\"language-text\">break</code></a> constructs. The <code class=\"language-text\">continue</code> token will cause the program to restart the loop when encountered, whereas the <code class=\"language-text\">break</code> token will completely exit the entire loop. These can be useful if, for example, we wanted to emulate a do-while loop in Python (which isn't natively supported):</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># do things</span>\n  <span class=\"token keyword\">if</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">break</span></code></pre></div>\n<h3>For Loop</h3>\n<p>You might have noticed that the previous bit of code is essentially executing a <a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#for-statements\">for loop</a>, a special case of a while loop where we have an explicit update step and condition. An identical implementation of the previous counter would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> counter <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"counter is less than 10\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What does the <a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#the-range-function\"><code class=\"language-text\">range()</code></a> function do? It returns a <code class=\"language-text\">range</code> object, which is an iterable. We'll expand on what this means later, but for now it just gives us an object that contains the integers between 0 and 9 that we can iterate over. Although there is no explicit condition in the for loop, we can see that the loop terminates when there are no more elements left in the <code class=\"language-text\">range</code> object to iterate over.</p>\n<p>There is a lot of nuance that we can gain from the for loop, and we will expand upon this in later sections.</p>\n<h3>Functions</h3>\n<p>The final piece of control flow is <a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#defining-functions\">functions</a>. As with for loops, there is a TON of nuance in implementing functions in Python, so for now, we'll stick with the basics.</p>\n<p>Defining a function is done using the <code class=\"language-text\">def</code> keyword:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add_one</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Notice the lack of a return type. Although running <code class=\"language-text\">add_one(4)</code> will return us 5, it's still possible to have a \"void\" type that returns \"null\":</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># standby, doing nothing</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">do_nothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Saving this return value to a variable (e.g. <code class=\"language-text\">x = do_nothing()</code>) will give us a <code class=\"language-text\">None</code> value, which is Python's version of \"null\". Since Python supports functional paradigms, I'll blow your mind with the notion that functions are actually objects in Python, same as integers, <code class=\"language-text\">None</code>, and custom <code class=\"language-text\">Koala</code> objects. Weird stuff that we will return to.</p>\n<h2>Conclusion</h2>\n<p>This is enough Python syntax to get you started, and at the very least will let you identify Python code in the wild. For loops and functions in Python are particularly weird since they contain a lot of power baked into them. More on them in the later lectures!</p>\n<hr>\n<h3>References</h3>\n<ol>\n<li><a href=\"https://www.python-course.eu/python3_history_and_philosophy.php\">python-course.eu</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/interpreter.html\">Interpreter - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#if-statements\">If-statements - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/reference/compound_stmts.html#while\">While-loop - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/reference/simple_stmts.html#the-continue-statement\">Continue statement - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/reference/simple_stmts.html#the-break-statement\">Break statement - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#for-statements\">For-statements - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#the-range-function\">Range function - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#defining-functions\">Functions - Python Docs</a></li>\n</ol>"}},"pageContext":{"pathSlug":"/basics"}},"staticQueryHashes":[]}