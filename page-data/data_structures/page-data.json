{"componentChunkName":"component---src-templates-blog-post-js","path":"/data_structures","result":{"data":{"markdownRemark":{"rawMarkdownBody":"\n# Data Structures and Algorithms\n\n> Efficiently Implementing Ideas in Python\n\nWriting efficient code is part of growing as a developer, and it's what seperates real programmers from the weak. Think back to CIS 121, why do we want to use Merge Sort over Bubble Sort? Long answer: it has to do with the complexity of $O(n^2)$ being asymptotically larger than $O(n \\operatorname{log} n)$. Short answer: we care about good practice, and good practice is often nothing more than better performing code, especially in Python. In this lecture, I hope to convince you of this.\n\nDisclaimer: we don't really care about asymptotic complexity much in this class. In fact, we primarily care about lines of code written, unless its **egregiously** poor performing code (think non-polynomial time). That being said, your employer/interviewer/collaborator will definitely care about code performance with theoretical grounding, so in this lecture we will make reference to the Big-O runtimes of various operations.\n\n## Sets\n\nLet's take it to the basics. We want to store just _some collection_ of things. That is, we want to maintain an _unordered_ bag of objects. In math and computer science, this construct is known as a **set**. Similarly, in Python this is called a [`set`](https://docs.python.org/3.7/tutorial/datastructures.html#sets) (suprise, suprise).\n\n### Instantiation\n\nWe can instantiate one by calling `set()`:\n\n```python\nstudents = set()\n```\n\n### Inserting/Deleting\n\nRecall that sets maintain unique elements (no duplicates) and each inserted element is _immutable_ (cannot be changed). We can insert into our newly created set by using the `.add()` method, which takes in any object as input. Or, we can also directly write elements into the curly braces:\n\n```python\nstudents.add(\"Arun\")\nother_students = {\"Arun\"}\nother_students.add(\"Jorge\")\n```\n\nSimilarly, we can remove elements from a set by calling `remove()`:\n\n```python\nstudents.remove(\"Arun\")\n```\n\n### Existence\n\nChecking if an element exists is one of the tidiest pieces of syntactic sugar from Python - we simply write the boolean expression pretty much in English using the [`in`](https://docs.python.org/3/reference/expressions.html#in) keyword:\n\n```python\nif \"Arun\" in students:\n    print(\"Arun is a student\")\n\nif \"Arun\" not in students:\n    print(\"Arun was a figment of our imagination\")\n```\n\nSets in Python are truthy, which means that an empty set has a value of `False` and vice versa:\n\n```python\nif students:\n    print(\"Students exist\")\n```\n\n### Size\n\nGetting the length of a set is pretty much the same as with all data structures, and can be done by calling `len()`, and _passing_ the set as an argument to the function:\n\n```python\nnumber_of_students = len(students)\n```\n\nWhy don't we just call something like `students.length`? We'll return to this in later lectures, but for now just consider this as a \"gotcha\" of Python.\n\n### Operations\n\nThink back to CIS 160 and set operations such as intersection (i.e. $A \\cap B$) and union (i.e. $ A \\cup B$). These operations are supported in Python, using their English vernacular:\n\n```python\nodds = {3, 5, 7, 9}\nprimes = {3, 5, 7}\n\nodd_primes = odds.intersection(primes)\n```\n\nThe shorthand for this is `set1 & set2`, which makes sense if you think of intersection as an extension of the logical AND operation. Similarly, union can be expressed either by calling `.union()` or by calling `set1 | set2`. Symmetric difference between sets can be computed using the `-` operation, which also makes intuitive sense. Don't you just love Python?\n\n## Tuples\n\nHow do we get a specific element from a set? Turns out, we can't. This is a limitation in the _API_ of sets; they're mainly used as a means of checking existence of certain objects. Let's move onto data structures that we can index into, thus preserving some notion of _order_. Recall a [tuple](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences) from CIS 120 as being an **immutable** sequence of elements.\n\n### Tuple Instantiation\n\nIn Python, we can declare a tuple by using regular brackets:\n\n```python\nname = \"Arun\"\nscore = 100\n\nstudent = (name, score)\n```\n\nNote that Python, like most sane languages, is designed to support 0-indexing. This is a nice compact way of expressing these two values such that we can index them later using the square notation that we are familiar with:\n\n```python\narun_score = student[1]\n```\n\nSome cool functionality supported by Python is **negative indexing**, this let us index by counting down from the _end_ of the tuple:\n\n```python\narun_score = student[-1]\n```\n\nTuples can also be defined _without_ the braces. The following two lines of Python are equivalent:\n\n```python\nstudent = (name, score)\nstudent = name, score\n```\n\nTuple \\*_destructuring_ is also a really elegant way of instantiating multiple variables _on the same line_:\n\n```python\nage, name, score = 20, \"Arun\", 100\n```\n\nThis implicitly creates a tuple `(age, name, score) = (20, \"Arun\", 100)`. Even if we don't end up explicitly using the defined tuple, we can still access its identifiers later in our code:\n\n```python\nprint(age)\nprint(name)\nprint(score)\n```\n\nEven if you don't end up using tuples much in your code, you will definitely use the tuple variable instantiation paradigm often. I'll leave you with a cool parlour trick to think about - swapping variables in a single line **without a temporary variable**:\n\n```python\n# instantiate variables\nx, y = 5, 10\n# swap\nx, y = y, x\n# clean up after blown mind\n```\n\n### Insertion/Removal\n\nTuples are designed to be **immutable**, so we actually can't change the contents of a tuple once it's been instantiated. That is, if we tried to set `student[1] = 99`, the code would crash. A little \"gotcha\" with tuples is that although the tuple itself cannot change, the values within the tuple are subject to mutation. This is because if we held a tuple of objects (which is no more than storing the _memory locations_ of the objects), and the objects were to change, the tuple would still hold reference to the mutated objects.\n\nA hack-y way to get around the lack of insertion with tuples is just to concatenate tuples together:\n\n```python\nname = \"Arun\"\nscore = 100\nage = 20\n\nstudent = (name, score)\n\nupdated_student = student + (age)\n```\n\nA cool Python parlour trick is to repeat the contents of a tuple by multiplying by a contant, an extension of concatenation using `+`:\n\n```python\nthree_ones = (1) * 3\n# this is equal to (1, 1, 1)\n```\n\n## Lists\n\nWhat if we wanted the indexing power of a tuple, but in the form of a _mutable_ data structure, one that allows us to change the contents inside. Suprise suprise - we've arrived back at the array! In Python, these are lovingly known as **lists**. [Lists](https://docs.python.org/3.7/tutorial/introduction.html#lists) are completely mutable objects that can contain _any_ arbitrary datatype. This means that we can have a list containing strings, integers, and custom Koala objects,\n\n### List Instantiation\n\nList declaration is extremely simple in Python. Similar to sets, we can either instantiate them by calling `list()` or by writing out the contents within a `[]`:\n\n```python\nstudents = [\"Arun\", \"Kevin\", \"Bob\"]\n```\n\nSimilar to tuples, we can retrive a single value within a list by indexing into it using the square bracket notation:\n\n```python\nprint(students[0])\n# prints Arun\n```\n\nWe can also index using negative indices to index from the end of an array:\n\n```python\nprint(students[-1]) # -> prints Bob\n```\n\n### Insertion/Removal\n\nWe can append values to a list using [`.append()`](https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists), which is an $O(1)$ operation in expectation:\n\n```python\nstudents.append(\"Imposter Arun\")\n```\n\nSimilarly, we can remove elements from a list using `.remove()`, which is an $O(n)$ operation in expectation (using linear search):\n\n```python\nstudents.remove(\"Arun\")\n```\n\nConcatenation using lists can be done using the `+` operator, as before:\n\n```python\nold_students = [\"Harry, Sumit\"]\nnew_students = [\"Arun\"]\nall_students = old_students + new_students\n```\n\n### Iteration\n\nIterating over lists is very elegant using the `for _ in _` paradigm:\n\n```python\nfor student in students:\n    print(student)\n    # prints Arun, Kevin, Bob\n```\n\nNote that we can rename `student` in the above code to be `x`, or `name` or any other identifier. This is equivalent to a `for each` loop in languages such as Java or JavaScript.\n\nIf we had a nested list (a list of lists), we can iterate over each element using a nested `for` loop:\n\n```python\npixels = [[1, 4, 6], [1, 3, 5], [1, 5, 7]]\nfor row in pixels:\n    for pixel in row:\n        print(pixel)\n        # prints each pixel\n```\n\n### Sorting\n\nWe can sort lists in a variety of ways. The first is to call [`sorted()`](https://docs.python.org/3.7/library/functions.html#sorted) on the list. This creates a **copy** of the original list:\n\n```python\nnumbers = [1, 5, 4, 12, 3, 0]\nprint(sorted(numbers)[0]) # -> prints 0\nprint(numbers[0]) # -> prints 1\n```\n\nThe second way is to call `.sort()` on a list. This sorts the list **in-place**:\n\n```python\nnumbers = [1, 5, 4, 12, 3, 0]\nnumbers.sort()\nprint(numbers[0]) # -> prints 0\n```\n\nWe can even sort in descending order by passing in a _keyword_ arguement `reverse`:\n\n```python\nnumbers = [1, 5, 4, 12, 3, 0]\nnumbers.sort(reverse=True)\nprint(numbers[0]) # -> prints 12\n```\n\nThere's also a way to define a custom sort by proving a keyword arguement `key` which is a function over the values in a list:\n\n```python\nstudents = [\"Arun\", \"Kevin\", \"Bob\"]\nstudents.sort(key=len) # -> sorts by length of each string\nprint(numbers[0]) # -> prints Bob\n```\n\nWe can also use this `key` arguement to sort a list of tuples. By default, sorting a list of tuples operates on the _first_ element of each tuple in the list. We can use the `key` arguement to sort by the _second_ element in eachh tuple:\n\n```python\nstudents = [(\"Arun\", 50), (\"Bob\", 80), (\"Kevin\", 100)]\nstudents.sort(key=lambda x: x[1], reverse=True)\nprint(students[0]) # -> prints (\"Kevin\", 100)\n```\n\nWe've thrown a couple of obscure concepts here: functions as objects and `lambda` functions. We'll cover both of these in our section on _Functional Programming_. Until then, feel free to think about these concepts only in the context of sorting lists!\n\n## Strings\n\nWe will re-introduce strings in the context of being a data structure. In particular, there are a variety of [operations](https://docs.python.org/3.7/library/stdtypes.html#string-methods) we can perform on them.\n\nRecall that a string can be instantiated by defining the characters within quotations:\n\n```python\nname = \"Arun Kirubarajan\"\n```\n\nRemember to note that strings are immutable, which means that we can only alter `name` by redefining a _new_ string, either by concatenation (an $O(n)$ operation), or by redefining the string completely.\n\n### Substrings\n\nLet's say we want to see if the string `\"Arun Kirubarajan\"` contains the substring \"Arun\". Since we are searching for a contiguous substring within the larger string, turns out we can just use our favourite `in` operator:\n\n```python\nif \"Arun\" in name:\n    print(\"First name exists!\")\n```\n\n### Slicing\n\nNow, imagine we have the need of actually computing the substrings within the string. This can be done using `slicing`, another elegant Python operation. To slice a string we just need to provide the starting index (_inclusive_), and the ending index (_exclusive_), seperated by a colon `:`.\n\n```python\nfirst_name = name[0:4]\nprint(name) # -> prints Arun\n```\n\nIn fact, the Python interpreter assumes that if no starting or ending index is provided, it will default to `0` and the length of the string respectively:\n\n```python\nfirst_name = name[:4]\nlast_name = name[5:]\n```\n\nFinally, we can provide a value after a second second colon `:` to indicate the increment size of the indexing:\n\n```python\nevery_second_letter = name[::2]\n```\n\nNote that calling slicing using `[::1]` is equivalent to the identity function. A corrolary of this is that we can _reverse_ a list quickly by providing a step size of `-1`:\n\n```python\nreversed_name = name[::-1]\n```\n\nThese slicing operations also apply to lists and tuples:\n\n```python\nnumbers = [1, 2, 3, 4, 5]\nprint(numbers[1:3])\n\nletters = ('a', 'b', 'c', 'd', 'e', 'f')\nprint(letters[::-1])\n```\n\nHow convenient!\n\n## Dictionaries\n\nOne of the most common paradigms for storing information is in the form of a key-value pair. In CIS 120 and 121, we learned about HashMaps, which allow us to perform lookup, insertion/deletion and retrieval in $O(1)$ time. Python's implementation of the hash table data structure is the [**dictionary**](https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries). Furthermore, they're _even easier_ to instantiate and use in Python. Dictionaries are **mutable** data structures that take a [hashable](https://docs.python.org/3/glossary.html#term-hashable) object as a key and provide an arbitrary object as a value. This means immutable objects like numbers or strings can be used as keys, but not lists or dictionaries. Tuples are only hashable if their contents are hashable\n\n### Dictionary Instantiation\n\nWe can create a dictionary by either calling `dict()` or by writing out its contents within curly braces `{}` with comma separated `key: value` pairs:\n\n```python\nscores = dict()\nscores = {\"Arun\": 50, \"Bob\": 99}\n```\n\n### Insertion/Removal\n\nWe can insert into a dictionary simply by using the square brackets:\n\n```python\nscores[\"New Student\"] = 100\nscores[\"Another Student\"] = 90\n```\n\nWe can confirm that these insertions work as expected by calling `len` on the dictionary, which works as expected.\n\nWe can also delete elements from a list using the `del` operator:\n\n```python\ndel scores[\"Arun\"]\n```\n\n### Default Dictionary\n\nIf we index into a dictionary with a key that doesn't exist, then our code will crash. We can check key existence with a dictionary by using the `in` operator:\n\n```python\nif \"Imposter Arun\" not in scores:\n    scores[\"Imposter Arun\"] = 0\nelse:\n    scores[\"Imposter Arun\"] = scores[\"Imposter Arun\"] + 1\n```\n\nBut sometimes, this isn't very compact. We can instantiate a dictionary with an initialized value by using the [`defaultdict`](https://docs.python.org/3.7/library/collections.html#defaultdict-objects) package. We haven't covered imports yet, but this package is a module that comes bundled with Python (known as a _first-party_ package) and includes a variety of useful features that we don't need to implement again.\n\nAt the top of our code we can add `from collections import defaultdict`, and we can now have a dictionary that has all of its values initialized to 0.\n\n```python\nwords = [\"I\", \"am\", \"going\", \"to\", \"the\", \"store\", \"I\", \"like\", \"the\", \"store\"]\ncounts = defaultdict()\n\nfor word in words:\n    counts[word] += 1\n    # do not need to worry about any errors!\n```\n\nBy default, the `defaultdictionary` has all of its keys initialized to the default integer value of 0, but we can specify types by passing a data-type into the constructor of the default dict.\n\n```python\ndefault_names = defaultdict(str)\n```\n\n## Objects\n\nPython is an object-oriented programming language, through and through. This means that all values such as integers, strings, and dictionaries are all considered objects to the Python interpreter. Here, we'll be taking a look at how to define and work with [objects](https://docs.python.org/3.7/tutorial/classes.html#a-first-look-at-classes).\n\n### Definition\n\nWe can define an object using the `class` keyword:\n\n```python\nclass Koala:\n    pass\n```\n\nThe `pass` keyword indicates that there is no code to execute in the current block, and to escape to the next scope. Now, we can provide our Koala with _as many_ member variables as we want:\n\n```python\nkoala = Koala()\nkoala.name = \"Bert\"\nkoala.age = 2\n```\n\nNote that we didn't define Koala to have any public/private variables or anything like that. Instead, all member variables can be defined at runtime and by default every variable is public (in fact, private variables [don't exist](https://docs.python.org/3.7/tutorial/classes.html#private-variables) in Python). But let's say we want to initialize the supported member variables. We can do this in the equivalent of a constructor, otherwise known as an `init` function in Python:\n\n```python\nclass Koala:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\nThe first thing to note here is the use of a `self` identifier. This is equivalent to `this` in Java, and it refers to the current object as context. The second thing to note is the double underscores before and after the `init`. The double underscores (hereby referred to as \"dunders\") show that this is a reserved function in Python. In fact, these types of methods with dunders in their names are called **magic methods**, and we'll cover them more in depth next lecture.\n\n### Inheritance\n\nLet's say we have a class made to represent animals:\n\n```python\nclass Animal:\n    def __init__(self, sound):\n        self.sound = sound\n\n    def make_sound(self):\n        print(self.sound)\n```\n\nIf we want to re-use the functionality from `Animal` in our usage of `Koala` we can [**inherit**](https://docs.python.org/3.7/tutorial/classes.html#inheritance) from the parent class `Animal` by adding the parent class name within parentheses:\n\n```python\nclass Koala(Animal):\n    def __init__(self, sound, name):\n        Animal.__init__(self, sound)\n        self.name = name\n\n    def say_name(self):\n        print(\"My name is \" + self.name)\n```\n\nNotice that we can call `__init__` on the parent class to invoke the constructor, which _overrides_ the constructor from the child class definition. We could do the same thing with the `make_sound` function, and a general rule of thumb is that we like to extend function definitions (like we do in the above example) rather than completely redefining them.\n\n## Conclusion\n\nWe've only scratched the surface with the different operations and member functions available to use for each data structure. I highly recommend checking out the [documentation](https://docs.python.org/3/library/collections.html) for collections and the data structures shown today, since a lot of quirky/specific uses are too broad to cover in a single lecture. As we progress in the course, you'll be exposed to different Pythonic syntactic sugar as well as other powerful paradigms for manipulating variables/information efficiently.\n\nYou might also be noticing some parallel APIs between lists, tuples, and strings. We'll make these similarities concrete when we talk about _Iterators_ next lecture. For now, just appreciate how easy it is to remember all the various operations!\n\nFor now, some fun exercises would be to implement canonical algorithms from CIS 121 such as DFS, BFS, Djikstra, Merge Sort, and Union Find. You'll find that a vast majority of algorithms have an elegant solution in Python! I'll leave you with a 5 line implementation of DFS in Python (for a vertex `node` and a set of `nodes` named `visited`):\n\n```python\ndef dfs(node, visited):\n    for neighbour in node.neighbours:\n        if neighbour not in visited:\n            visited.add(neighbour)\n            dfs(neighbour, visited)\n```\n\nAh, feels good.\n\n---\n\n### References\n\n1. [Sets - Python Docs](https://docs.python.org/3.7/tutorial/datastructures.html#sets)\n2. [In - Python Docs](https://docs.python.org/3/reference/expressions.html#in)\n3. [Tuples and Sequences - Python Docs](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences)\n4. [Lists - Python Docs](https://docs.python.org/3.7/tutorial/introduction.html#lists)\n5. [More List Methods - Python Docs](https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists)\n6. [Sorted - Python Docs](https://docs.python.org/3.7/library/functions.html#sorted)\n7. [Strings - Python Docs](https://docs.python.org/3.7/library/stdtypes.html#string-methods)\n8. [Dictionaries - Python Docs](https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries)\n9. [Default Dictionaries - Python Docs](https://docs.python.org/3.7/library/collections.html#defaultdict-objects)\n10. [Classes - Python Docs](https://docs.python.org/3.7/tutorial/classes.html#a-first-look-at-classes)\n11. [Private Variables - Python Docs](https://docs.python.org/3.7/tutorial/classes.html#private-variables)\n12. [Inheritance - Python Docs](https://docs.python.org/3.7/tutorial/classes.html#inheritance)\n13. [Collections - Python Docs](https://docs.python.org/3/library/collections.html)\n","html":"<h1>Data Structures and Algorithms</h1>\n<blockquote>\n<p>Efficiently Implementing Ideas in Python</p>\n</blockquote>\n<p>Writing efficient code is part of growing as a developer, and it's what seperates real programmers from the weak. Think back to CIS 121, why do we want to use Merge Sort over Bubble Sort? Long answer: it has to do with the complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> being asymptotically larger than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\operatorname{log} n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>. Short answer: we care about good practice, and good practice is often nothing more than better performing code, especially in Python. In this lecture, I hope to convince you of this.</p>\n<p>Disclaimer: we don't really care about asymptotic complexity much in this class. In fact, we primarily care about lines of code written, unless its <strong>egregiously</strong> poor performing code (think non-polynomial time). That being said, your employer/interviewer/collaborator will definitely care about code performance with theoretical grounding, so in this lecture we will make reference to the Big-O runtimes of various operations.</p>\n<h2>Sets</h2>\n<p>Let's take it to the basics. We want to store just <em>some collection</em> of things. That is, we want to maintain an <em>unordered</em> bag of objects. In math and computer science, this construct is known as a <strong>set</strong>. Similarly, in Python this is called a <a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#sets\"><code class=\"language-text\">set</code></a> (suprise, suprise).</p>\n<h3>Instantiation</h3>\n<p>We can instantiate one by calling <code class=\"language-text\">set()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">students <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Inserting/Deleting</h3>\n<p>Recall that sets maintain unique elements (no duplicates) and each inserted element is <em>immutable</em> (cannot be changed). We can insert into our newly created set by using the <code class=\"language-text\">.add()</code> method, which takes in any object as input. Or, we can also directly write elements into the curly braces:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">students<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">)</span>\nother_students <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">}</span>\nother_students<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jorge\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Similarly, we can remove elements from a set by calling <code class=\"language-text\">remove()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">students<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Existence</h3>\n<p>Checking if an element exists is one of the tidiest pieces of syntactic sugar from Python - we simply write the boolean expression pretty much in English using the <a href=\"https://docs.python.org/3/reference/expressions.html#in\"><code class=\"language-text\">in</code></a> keyword:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token string\">\"Arun\"</span> <span class=\"token keyword\">in</span> students<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arun is a student\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token string\">\"Arun\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> students<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arun was a figment of our imagination\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sets in Python are truthy, which means that an empty set has a value of <code class=\"language-text\">False</code> and vice versa:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> students<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Students exist\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Size</h3>\n<p>Getting the length of a set is pretty much the same as with all data structures, and can be done by calling <code class=\"language-text\">len()</code>, and <em>passing</em> the set as an argument to the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">number_of_students <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Why don't we just call something like <code class=\"language-text\">students.length</code>? We'll return to this in later lectures, but for now just consider this as a \"gotcha\" of Python.</p>\n<h3>Operations</h3>\n<p>Think back to CIS 160 and set operations such as intersection (i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\cap B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>) and union (i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\cup B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>). These operations are supported in Python, using their English vernacular:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">odds <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span>\nprimes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span>\n\nodd_primes <span class=\"token operator\">=</span> odds<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The shorthand for this is <code class=\"language-text\">set1 &amp; set2</code>, which makes sense if you think of intersection as an extension of the logical AND operation. Similarly, union can be expressed either by calling <code class=\"language-text\">.union()</code> or by calling <code class=\"language-text\">set1 | set2</code>. Symmetric difference between sets can be computed using the <code class=\"language-text\">-</code> operation, which also makes intuitive sense. Don't you just love Python?</p>\n<h2>Tuples</h2>\n<p>How do we get a specific element from a set? Turns out, we can't. This is a limitation in the <em>API</em> of sets; they're mainly used as a means of checking existence of certain objects. Let's move onto data structures that we can index into, thus preserving some notion of <em>order</em>. Recall a <a href=\"https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences\">tuple</a> from CIS 120 as being an <strong>immutable</strong> sequence of elements.</p>\n<h3>Tuple Instantiation</h3>\n<p>In Python, we can declare a tuple by using regular brackets:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">name <span class=\"token operator\">=</span> <span class=\"token string\">\"Arun\"</span>\nscore <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\nstudent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note that Python, like most sane languages, is designed to support 0-indexing. This is a nice compact way of expressing these two values such that we can index them later using the square notation that we are familiar with:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">arun_score <span class=\"token operator\">=</span> student<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Some cool functionality supported by Python is <strong>negative indexing</strong>, this let us index by counting down from the <em>end</em> of the tuple:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">arun_score <span class=\"token operator\">=</span> student<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Tuples can also be defined <em>without</em> the braces. The following two lines of Python are equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">student <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\nstudent <span class=\"token operator\">=</span> name<span class=\"token punctuation\">,</span> score</code></pre></div>\n<p>Tuple *<em>destructuring</em> is also a really elegant way of instantiating multiple variables <em>on the same line</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">age<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> score <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span></code></pre></div>\n<p>This implicitly creates a tuple <code class=\"language-text\">(age, name, score) = (20, &quot;Arun&quot;, 100)</code>. Even if we don't end up explicitly using the defined tuple, we can still access its identifiers later in our code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Even if you don't end up using tuples much in your code, you will definitely use the tuple variable instantiation paradigm often. I'll leave you with a cool parlour trick to think about - swapping variables in a single line <strong>without a temporary variable</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># instantiate variables</span>\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span>\n<span class=\"token comment\"># swap</span>\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">,</span> x\n<span class=\"token comment\"># clean up after blown mind</span></code></pre></div>\n<h3>Insertion/Removal</h3>\n<p>Tuples are designed to be <strong>immutable</strong>, so we actually can't change the contents of a tuple once it's been instantiated. That is, if we tried to set <code class=\"language-text\">student[1] = 99</code>, the code would crash. A little \"gotcha\" with tuples is that although the tuple itself cannot change, the values within the tuple are subject to mutation. This is because if we held a tuple of objects (which is no more than storing the <em>memory locations</em> of the objects), and the objects were to change, the tuple would still hold reference to the mutated objects.</p>\n<p>A hack-y way to get around the lack of insertion with tuples is just to concatenate tuples together:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">name <span class=\"token operator\">=</span> <span class=\"token string\">\"Arun\"</span>\nscore <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nage <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\nstudent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span>\n\nupdated_student <span class=\"token operator\">=</span> student <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span></code></pre></div>\n<p>A cool Python parlour trick is to repeat the contents of a tuple by multiplying by a contant, an extension of concatenation using <code class=\"language-text\">+</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">three_ones <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n<span class=\"token comment\"># this is equal to (1, 1, 1)</span></code></pre></div>\n<h2>Lists</h2>\n<p>What if we wanted the indexing power of a tuple, but in the form of a <em>mutable</em> data structure, one that allows us to change the contents inside. Suprise suprise - we've arrived back at the array! In Python, these are lovingly known as <strong>lists</strong>. <a href=\"https://docs.python.org/3.7/tutorial/introduction.html#lists\">Lists</a> are completely mutable objects that can contain <em>any</em> arbitrary datatype. This means that we can have a list containing strings, integers, and custom Koala objects,</p>\n<h3>List Instantiation</h3>\n<p>List declaration is extremely simple in Python. Similar to sets, we can either instantiate them by calling <code class=\"language-text\">list()</code> or by writing out the contents within a <code class=\"language-text\">[]</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kevin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Similar to tuples, we can retrive a single value within a list by indexing into it using the square bracket notation:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># prints Arun</span></code></pre></div>\n<p>We can also index using negative indices to index from the end of an array:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> prints Bob</span></code></pre></div>\n<h3>Insertion/Removal</h3>\n<p>We can append values to a list using <a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists\"><code class=\"language-text\">.append()</code></a>, which is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> operation in expectation:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">students<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"Imposter Arun\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Similarly, we can remove elements from a list using <code class=\"language-text\">.remove()</code>, which is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> operation in expectation (using linear search):</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">students<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Concatenation using lists can be done using the <code class=\"language-text\">+</code> operator, as before:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">old_students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Harry, Sumit\"</span><span class=\"token punctuation\">]</span>\nnew_students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">]</span>\nall_students <span class=\"token operator\">=</span> old_students <span class=\"token operator\">+</span> new_students</code></pre></div>\n<h3>Iteration</h3>\n<p>Iterating over lists is very elegant using the <code class=\"language-text\">for _ in _</code> paradigm:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> student <span class=\"token keyword\">in</span> students<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># prints Arun, Kevin, Bob</span></code></pre></div>\n<p>Note that we can rename <code class=\"language-text\">student</code> in the above code to be <code class=\"language-text\">x</code>, or <code class=\"language-text\">name</code> or any other identifier. This is equivalent to a <code class=\"language-text\">for each</code> loop in languages such as Java or JavaScript.</p>\n<p>If we had a nested list (a list of lists), we can iterate over each element using a nested <code class=\"language-text\">for</code> loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">pixels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> pixels<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> pixel <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pixel<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># prints each pixel</span></code></pre></div>\n<h3>Sorting</h3>\n<p>We can sort lists in a variety of ways. The first is to call <a href=\"https://docs.python.org/3.7/library/functions.html#sorted\"><code class=\"language-text\">sorted()</code></a> on the list. This creates a <strong>copy</strong> of the original list:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> prints 0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> prints 1</span></code></pre></div>\n<p>The second way is to call <code class=\"language-text\">.sort()</code> on a list. This sorts the list <strong>in-place</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nnumbers<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> prints 0</span></code></pre></div>\n<p>We can even sort in descending order by passing in a <em>keyword</em> arguement <code class=\"language-text\">reverse</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nnumbers<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> prints 12</span></code></pre></div>\n<p>There's also a way to define a custom sort by proving a keyword arguement <code class=\"language-text\">key</code> which is a function over the values in a list:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kevin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">]</span>\nstudents<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> sorts by length of each string</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> prints Bob</span></code></pre></div>\n<p>We can also use this <code class=\"language-text\">key</code> arguement to sort a list of tuples. By default, sorting a list of tuples operates on the <em>first</em> element of each tuple in the list. We can use the <code class=\"language-text\">key</code> arguement to sort by the <em>second</em> element in eachh tuple:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Kevin\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nstudents<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> prints (\"Kevin\", 100)</span></code></pre></div>\n<p>We've thrown a couple of obscure concepts here: functions as objects and <code class=\"language-text\">lambda</code> functions. We'll cover both of these in our section on <em>Functional Programming</em>. Until then, feel free to think about these concepts only in the context of sorting lists!</p>\n<h2>Strings</h2>\n<p>We will re-introduce strings in the context of being a data structure. In particular, there are a variety of <a href=\"https://docs.python.org/3.7/library/stdtypes.html#string-methods\">operations</a> we can perform on them.</p>\n<p>Recall that a string can be instantiated by defining the characters within quotations:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">name <span class=\"token operator\">=</span> <span class=\"token string\">\"Arun Kirubarajan\"</span></code></pre></div>\n<p>Remember to note that strings are immutable, which means that we can only alter <code class=\"language-text\">name</code> by redefining a <em>new</em> string, either by concatenation (an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> operation), or by redefining the string completely.</p>\n<h3>Substrings</h3>\n<p>Let's say we want to see if the string <code class=\"language-text\">&quot;Arun Kirubarajan&quot;</code> contains the substring \"Arun\". Since we are searching for a contiguous substring within the larger string, turns out we can just use our favourite <code class=\"language-text\">in</code> operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token string\">\"Arun\"</span> <span class=\"token keyword\">in</span> name<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First name exists!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Slicing</h3>\n<p>Now, imagine we have the need of actually computing the substrings within the string. This can be done using <code class=\"language-text\">slicing</code>, another elegant Python operation. To slice a string we just need to provide the starting index (<em>inclusive</em>), and the ending index (<em>exclusive</em>), seperated by a colon <code class=\"language-text\">:</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">first_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\"># -> prints Arun</span></code></pre></div>\n<p>In fact, the Python interpreter assumes that if no starting or ending index is provided, it will default to <code class=\"language-text\">0</code> and the length of the string respectively:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">first_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nlast_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Finally, we can provide a value after a second second colon <code class=\"language-text\">:</code> to indicate the increment size of the indexing:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">every_second_letter <span class=\"token operator\">=</span> name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Note that calling slicing using <code class=\"language-text\">[::1]</code> is equivalent to the identity function. A corrolary of this is that we can <em>reverse</em> a list quickly by providing a step size of <code class=\"language-text\">-1</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reversed_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>These slicing operations also apply to lists and tuples:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nletters <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>How convenient!</p>\n<h2>Dictionaries</h2>\n<p>One of the most common paradigms for storing information is in the form of a key-value pair. In CIS 120 and 121, we learned about HashMaps, which allow us to perform lookup, insertion/deletion and retrieval in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time. Python's implementation of the hash table data structure is the <a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries\"><strong>dictionary</strong></a>. Furthermore, they're <em>even easier</em> to instantiate and use in Python. Dictionaries are <strong>mutable</strong> data structures that take a <a href=\"https://docs.python.org/3/glossary.html#term-hashable\">hashable</a> object as a key and provide an arbitrary object as a value. This means immutable objects like numbers or strings can be used as keys, but not lists or dictionaries. Tuples are only hashable if their contents are hashable</p>\n<h3>Dictionary Instantiation</h3>\n<p>We can create a dictionary by either calling <code class=\"language-text\">dict()</code> or by writing out its contents within curly braces <code class=\"language-text\">{}</code> with comma separated <code class=\"language-text\">key: value</code> pairs:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">scores <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Insertion/Removal</h3>\n<p>We can insert into a dictionary simply by using the square brackets:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">scores<span class=\"token punctuation\">[</span><span class=\"token string\">\"New Student\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nscores<span class=\"token punctuation\">[</span><span class=\"token string\">\"Another Student\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">90</span></code></pre></div>\n<p>We can confirm that these insertions work as expected by calling <code class=\"language-text\">len</code> on the dictionary, which works as expected.</p>\n<p>We can also delete elements from a list using the <code class=\"language-text\">del</code> operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">del</span> scores<span class=\"token punctuation\">[</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Default Dictionary</h3>\n<p>If we index into a dictionary with a key that doesn't exist, then our code will crash. We can check key existence with a dictionary by using the <code class=\"language-text\">in</code> operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token string\">\"Imposter Arun\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> scores<span class=\"token punctuation\">:</span>\n    scores<span class=\"token punctuation\">[</span><span class=\"token string\">\"Imposter Arun\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    scores<span class=\"token punctuation\">[</span><span class=\"token string\">\"Imposter Arun\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">[</span><span class=\"token string\">\"Imposter Arun\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>But sometimes, this isn't very compact. We can instantiate a dictionary with an initialized value by using the <a href=\"https://docs.python.org/3.7/library/collections.html#defaultdict-objects\"><code class=\"language-text\">defaultdict</code></a> package. We haven't covered imports yet, but this package is a module that comes bundled with Python (known as a <em>first-party</em> package) and includes a variety of useful features that we don't need to implement again.</p>\n<p>At the top of our code we can add <code class=\"language-text\">from collections import defaultdict</code>, and we can now have a dictionary that has all of its values initialized to 0.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"am\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"going\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"to\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"store\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"like\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"store\"</span><span class=\"token punctuation\">]</span>\ncounts <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n    counts<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># do not need to worry about any errors!</span></code></pre></div>\n<p>By default, the <code class=\"language-text\">defaultdictionary</code> has all of its keys initialized to the default integer value of 0, but we can specify types by passing a data-type into the constructor of the default dict.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">default_names <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Objects</h2>\n<p>Python is an object-oriented programming language, through and through. This means that all values such as integers, strings, and dictionaries are all considered objects to the Python interpreter. Here, we'll be taking a look at how to define and work with <a href=\"https://docs.python.org/3.7/tutorial/classes.html#a-first-look-at-classes\">objects</a>.</p>\n<h3>Definition</h3>\n<p>We can define an object using the <code class=\"language-text\">class</code> keyword:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Koala</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>The <code class=\"language-text\">pass</code> keyword indicates that there is no code to execute in the current block, and to escape to the next scope. Now, we can provide our Koala with <em>as many</em> member variables as we want:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">koala <span class=\"token operator\">=</span> Koala<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nkoala<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Bert\"</span>\nkoala<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">2</span></code></pre></div>\n<p>Note that we didn't define Koala to have any public/private variables or anything like that. Instead, all member variables can be defined at runtime and by default every variable is public (in fact, private variables <a href=\"https://docs.python.org/3.7/tutorial/classes.html#private-variables\">don't exist</a> in Python). But let's say we want to initialize the supported member variables. We can do this in the equivalent of a constructor, otherwise known as an <code class=\"language-text\">init</code> function in Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Koala</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</code></pre></div>\n<p>The first thing to note here is the use of a <code class=\"language-text\">self</code> identifier. This is equivalent to <code class=\"language-text\">this</code> in Java, and it refers to the current object as context. The second thing to note is the double underscores before and after the <code class=\"language-text\">init</code>. The double underscores (hereby referred to as \"dunders\") show that this is a reserved function in Python. In fact, these types of methods with dunders in their names are called <strong>magic methods</strong>, and we'll cover them more in depth next lecture.</p>\n<h3>Inheritance</h3>\n<p>Let's say we have a class made to represent animals:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sound <span class=\"token operator\">=</span> sound\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">make_sound</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sound<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If we want to re-use the functionality from <code class=\"language-text\">Animal</code> in our usage of <code class=\"language-text\">Koala</code> we can <a href=\"https://docs.python.org/3.7/tutorial/classes.html#inheritance\"><strong>inherit</strong></a> from the parent class <code class=\"language-text\">Animal</code> by adding the parent class name within parentheses:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Koala</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Animal<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">say_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My name is \"</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice that we can call <code class=\"language-text\">__init__</code> on the parent class to invoke the constructor, which <em>overrides</em> the constructor from the child class definition. We could do the same thing with the <code class=\"language-text\">make_sound</code> function, and a general rule of thumb is that we like to extend function definitions (like we do in the above example) rather than completely redefining them.</p>\n<h2>Conclusion</h2>\n<p>We've only scratched the surface with the different operations and member functions available to use for each data structure. I highly recommend checking out the <a href=\"https://docs.python.org/3/library/collections.html\">documentation</a> for collections and the data structures shown today, since a lot of quirky/specific uses are too broad to cover in a single lecture. As we progress in the course, you'll be exposed to different Pythonic syntactic sugar as well as other powerful paradigms for manipulating variables/information efficiently.</p>\n<p>You might also be noticing some parallel APIs between lists, tuples, and strings. We'll make these similarities concrete when we talk about <em>Iterators</em> next lecture. For now, just appreciate how easy it is to remember all the various operations!</p>\n<p>For now, some fun exercises would be to implement canonical algorithms from CIS 121 such as DFS, BFS, Djikstra, Merge Sort, and Union Find. You'll find that a vast majority of algorithms have an elegant solution in Python! I'll leave you with a 5 line implementation of DFS in Python (for a vertex <code class=\"language-text\">node</code> and a set of <code class=\"language-text\">nodes</code> named <code class=\"language-text\">visited</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> neighbour <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">.</span>neighbours<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> neighbour <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            visited<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>neighbour<span class=\"token punctuation\">)</span>\n            dfs<span class=\"token punctuation\">(</span>neighbour<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ah, feels good.</p>\n<hr>\n<h3>References</h3>\n<ol>\n<li><a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#sets\">Sets - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3/reference/expressions.html#in\">In - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences\">Tuples and Sequences - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/introduction.html#lists\">Lists - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists\">More List Methods - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/library/functions.html#sorted\">Sorted - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/library/stdtypes.html#string-methods\">Strings - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries\">Dictionaries - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/library/collections.html#defaultdict-objects\">Default Dictionaries - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/classes.html#a-first-look-at-classes\">Classes - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/classes.html#private-variables\">Private Variables - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/classes.html#inheritance\">Inheritance - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3/library/collections.html\">Collections - Python Docs</a></li>\n</ol>"}},"pageContext":{"pathSlug":"/data_structures"}},"staticQueryHashes":[]}