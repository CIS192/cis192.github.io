{"componentChunkName":"component---src-templates-blog-post-js","path":"/pythonic","result":{"data":{"markdownRemark":{"rawMarkdownBody":"\n# Pythonic Programming\n\n> The \"Python\" Way of Doing Things\n\nIn this lecture, we'll be tackling a variety of Python constructs that are exclusive to the language. A variety of the examples shown today might feel a little contrived, but we'll see later in the course that each and every module shown in this lecture will be either necessary for certain functionality, or just incredibly awesome syntactic sugar.\n\n## Objects\n\nLet's start off with some core object-oriented concepts. Let's say we have a simple class definition as follows:\n\n```python\nclass Animal():\n    def __init__(self, sound):\n        self.sound = sound\n\n    def make_sound(self):\n        print(self.sound)\n\ncow = Animal(\"Moo\")\ncow.make_sound()\n```\n\nHow can we extend this general class functionality into a more specific implementation?\n\n### Inheritance\n\nWe can _inherit_ functionality from the parent class by passing in the parent class into the child class signature:\n\n```python\nclass Koala(Animal):\n    def __init__(self, sound):\n        Animal.__init__(self, sound)\n\n    def sleep(self):\n        print(\"*loud snoring sound*)\n```\n\nWe do this by calling the `.__init__()` of the parent class within the `.__init__()` of the child. Now, we can perform behaviour specific to both the child class, and the parent class!\n\n```python\nhuman = Animal(\"When will permits be administered?\")\nhuman.make_sound()\n\nkoala = Koala(\"screeching sound\")\nkoala.make_sound()\nkoala.sleep()\n```\n\nBut what does `.__init__()` actually do?\n\n### Magic Methods\n\nWe know [`__init__()`](https://docs.python.org/3.7/reference/datamodel.html#object.__init__) as something like a constructor. But there are a varitey of other core object functionalities that can be implemented (or overridden). For example, getting the length of a list using `len()` is actually implemented on the list object using [`__len__()`](https://docs.python.org/3.7/reference/datamodel.html#object.__len__). There are a variety of ther magic methods that can be used:\n\n```python\nclass Sloth(Animal):\n    def __init__(self, sound, length):\n        Animal.__init__(self, sound)\n        self.length = length\n\n    def __hang_out__(self):\n        print(\"Hanging out.\")\n\n    def __len__(self):\n        return self.length\n\n    def __add__(self, other):\n        return Sloth(\"I'm A BIG SLOTH.\", self.length + len(other))\n\n    def __str__(self):\n        return \"The sloth is currently unavailable.\"\n\nsloth2 = Sloth(\"I'm lazy.\", 10)\nlen(sloth2)\n\nsloth3 = sloth2 + sloth2\nsloth3.make_sound()\n```\n\nThere are dozens of magic methods, which makes sense since magic methods typically implement some core piece of Python functionality with respect to objects. Explore the magic methods and see where that takes you!\n\n### Extras: Class Methods and Static Methods\n\nSo far, we've talked about methods which relate to a specific instance. These are known as instance methods (suprise, suprise). However, there are entirely different families of functions which are defined within classes. Thinking about these can get a little abstract and paritcular, so I've decided to summarize them for you here in case you ever need to implement one of these functions. The explanation for \"decorating\" a function is a little out of order and is at the end of these notes, so return here after reading it!\n\nThe first interesting family of methods are Static methods, which you may be familiar with from other languages such as Java, allow us to define functionality for a specific class that does not depend on any specific instance. To do this, we decorate a function with [`@staticmethod`](https://docs.python.org/3.7/library/functions.html#staticmethod) and we can subsequently call the method using something like `CustomClass.static_method()`. Note that this is entirely different from first instantiating `obj = CustomClass()` and then calling `obj.static_method()`.\n\nNext, let's talk about Class Methods, which are functions which are decorated with [`@classmethod`](https://docs.python.org/3.7/library/functions.html#classmethod). They don't pertain to a specific instance, but instead maintain state across all instances of the class. For example, a `count()` class method can be defined to return the amount of objects that are instantiated for a given class.\n\n### Copying\n\nSometimes, trying to work with objects and their locations in memory can get confusing. So, Python lets you explicitly deal with these situations using the [`copy`](https://docs.python.org/3.7/library/copy.html#module-copy) module. The two relevant modules can be imported by calling `from copy import copy, deepcopy`.\n\nThe two relevant packages here are `copy` and `deepcopy`. Copy lets you copy the contents of an object into another object:\n\n```python\nfrom copy import copy\n\n# initializing list 1\nli1 = [1, 2, [3,5], 4]\nli2 = copy(li1)\n\nli1[0] = 5\n\nprint(li1[0], li2[0])\n```\n\nNotice that editing `li1` does not change `li2`. But copying objects like this doesn't always work so cleanly. Imagine if we had _more objects_ as fields in the copied object. This naive copying wouldn't update the references on those nested objects. To fix this, we need to use the `deepcopy` package, which recursively copies objects and fields:\n\n```python\nfrom copy import deepcopy\n\nli3 = copy.deepcopy(li1)\n\nli2[2][0] = 5\nli3[2][0] = 0\n\nprint(li1[2], li2[2], li3[2])\n```\n\nThese functions can resolve a lot of headaches when working with algorithms involving duplicate (or nearly identical) data.\n\n## Functions\n\nRecall that we can define functions using the `def` parameter, and that we're at a lot of liberty with arguments and return types:\n\n```python\ndef add_two(x, y):\n    return x + y\n```\n\nSomething that's even more interesting about functions is the use of _positional arguments_ and _keyword arguments_.\n\n### Positional Arguments and Args\n\nThe [language reference](https://docs.python.org/3.7/reference/compound_stmts.html#function-definitions) succinctly describes positional and keyword arguments as follows:\n\n> If the form *identifier is present, it is initialized to a tuple receiving any excess positional parameters, defaulting to the empty tuple. If the form **identifier is present, it is initialized to a new dictionary receiving any excess keyword arguments, defaulting to a new empty dictionary.\n\nSometimes, we might choose to be less explicit with our function signatures. Specifically, we can use the single asterisk `*` before a function argument to allow for a variable amount of inputs. Let's refactor our `add_two` function into `def add(*args)`.\n\nIn our function definition, the multiple parameters are represented as a list:\n\n```python\ndef add(*args):\n    total = 0\n    for number in args:\n        total = total + number\n    return total\n```\n\nIsn't that convenient? For more on positional arguments, see [here](https://docs.python.org/3.7/tutorial/controlflow.html#arbitrary-argument-lists) and [here](https://docs.python.org/3/glossary.html#term-argument).\n\n### Keyword Arguments and Kwargs\n\nIn Python, we can also extend argument definitions with [_keyword arguments_](https://docs.python.org/3.7/tutorial/controlflow.html#keyword-arguments). Consider the following subtract function:\n\n```python\ndef subtract(x, y):\n    return x - y\n```\n\nNote that the operation is not symmetric. That is, `subtract(10, 5)` is not `subtract(5, 10)`. We can fix this by providing our arguments as keyworded arguments. In particular, we can call `subtract(y=5, x=10)` to yield the equivalent result as `subtract(10, 5)`.\n\nIn fact, we can even set default parameters this way as well:\n\n```python\ndef print_error(message=\"This is the default error message!\"):\n    print(message)\n```\n\nOur notion of `*args` to denote multiple positional arguments extends as well to keyworded arguments, which gives us `**kwargs` (with the double asterisk). In our function body this is represented as a dictionary:\n\n```python\ndef print_attributes(kind, **kwargs):\n    print(\"this is a \", kind)\n\n    for attribute in kwargs:\n        print(attribute, kwargs[attribute])\n```\n\nIsn't that also convenient?\n\n## Comprehensions\n\nLet's motivate the next few concepts by displaying more Python elegance through the `for` construct. In particular, let's think about how we can square a list of numbers. Consider the naive approach:\n\n```python\nold_list = [1, 2, 3, 4, 5]\nnew_list = list()\n\nfor number in old_list:\n    new_list.append(number ** 2)\n```\n\nThis looks like it should work fine, and it does! However, this idea of looping over a list to create a new list is a common paradigm in Python programming. As such, the language supports some of my favourite syntactic sugar: [_list comprehensions_](https://docs.python.org/3.7/tutorial/datastructures.html#list-comprehensions).\n\nLet's re-write this code using a list comprehension:\n\n```python\nold_list = [1, 2, 3, 4, 5]\nnew_list = [x ** 2 for x in old_list]\n```\n\nAnd we're done! The general formula for a _list comprehension_ is:\n\n```python\n(expression) for (value) in (list) (if condition)\n```\n\nWe can selectively choose values using an `if` clause at the end of the comprehension:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7]\neven_numbers = [x for x in numbers if x % 2 == 0]\n```\n\nComprehensions can also be applied to sets and dictionaries:\n\n```python\nnames = [\"ARun\", \"saIF\", \"KeVin\"]\n\n# dictionary comprehension for lengths\nname_lengths = {name: len(name) for name in names}\n\n# set comprehension for string formatting\nformatted_names = {name[0].upper() + name[1:].lower() for name in names}\n```\n\nAs a hint, whenever we want you to implement functions in a single line, we generally want you to think about some kind of comprehension.\n\n## Iterators\n\nSo how do for loops and list comprehensions work so seamlessly? And what kinds of objects can we iterate over? Turns out, any object that implements the magic methods `__next__` and `__iter__`. So something that looks like this:\n\n```python\nli = list()\nfor item in li:\n    print(item)\nprint(\"complete\")\n```\n\nactually looks like this:\n\n```python\nli = list()\niterator = iter(li)\n\ntry:\n    while True:\n        item = next(iterator)\n        print(item)\nexcept:\n    print(\"complete\")\n```\n\nHere's an example definition:\n\n```python\nclass CountByOne:\n    def __init__(self, start=0):\n        self.num = start\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        num = self.num\n        self.num += 1\n        return num\n\niterator = CountByOne()\nfor i in range(10):\n    print(next(iterator))\n```\n\n## Generators\n\nLet's talk about some more function behaviour. We're used to functions that return a single value and terminate their execution upon returning. In Python, we can extend this idea of returning a value to [_generators_](https://docs.python.org/3.7/tutorial/classes.html#generators). Generators are functions that `yield` a value, and do not terminate upon doing so. As a result, we can declare functions that act as iterators.\n\n```python\ndef simple_yields():\n    yield 1\n    print(\"only see this when yielding 2!\")\n    yield 2\n    print(\"only see this when yielding 3!\")\n    yield 3\n    print(\"only see this when yielding 4!\")\n    yield 4\n\ngenerator = simple_yields()\nprint(next(generator))\nprint(next(generator))\nprint(next(generator))\n```\n\nNotice this is the same thing as the iterator, but we don't need to define an iterator class, or even a `next` function!\n\nLet's now see how we can perform computation and yield results sequentially. We can implement `CountByOne` from before as a generator:\n\n```python\ndef count(start=0, end=10):\n    num = start\n    while num < end:\n        yield num\n        num += 1\n\ngenerator = count(end=20) # defines generator object\nfor number in generator:\n    print(number)\n```\n\nNote that when calling `count(end=20)`, we are returned the generator itself and we can then iterate over the outputs of the generator. Between `yield` statements, the execution of the function is essentially stopped until the caller makes another call.\n\nWe can even define generators in terms of other iterators:\n\n```python\ndef square_generator(n):\n    for i in range(n):\n        yield i ** 2\n```\n\nI hope this helps you understand how for-loops work behind the scenes!\n\n## Lambda Functions\n\nPython is an object-oriented language at its core, and that means that functions are also first-class citizens in the language. We can see this if we define a custom function `def foo(): pass` and then call `print(foo)` without brackets to start the function call.\n\nRecall the notion of anonymous functions from CIS 120. We have a similar notion in Python named [_lambda functions_](https://docs.python.org/3.7/tutorial/controlflow.html#lambda-expressions), which unlocks functional programming paradigms in Python by letting us use _functions as arguments_.\n\nLambda functions look like this:\n\n```python\nlambda x: x + 1\n```\n\nThis is a function that, as you can imagine, adds by 1. Note that lambda functions by default return the expression that is defined. This is expected behaviour in functional programming. We can apply this function directly or by giving it a name. The following function calls are equivalent\n\n```python\ny = (lambda x: x + 1)(4)\n\nadd_one = lambda x: x + 1\ny = add_one(4)\n```\n\nLet's consider sorting a list of strings by their length. In a language like Java, we would have to define a custom sorting function, or mutate the original list to include auxillary data. However, in Python, we can provide a lambda function to the `sorted` function:\n\n```python\nnames = [\"Arun\", \"Saif\", \"Kevin\"]\nsorted_names = sorted(names, key=lambda x: len(x))\n```\n\nLet's disect this. The `key` parameter tells the `sorted` function what value to use for comparing elements. So, when we pass a lambda function that returns the length of the values, we get the algorithm to sort based off of length.\n\nWe can also implement some classical functional programming ideas on lists such as `map` (which is sort of like a comprehension) and `filter` (which filters elements according to some function):\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6]\nsquares = map(lambda x: x ** 2, numbers)\nevents = filter(lambda x: x % 2 == 0, numbers)\n```\n\nLambda functions give us powerful programming capabilities.\n\n## Decorators\n\n[Decorators](https://docs.python.org/3.7/glossary.html#term-decorator) are a complex topic in Python, so we'll try to introduce the elegance of the topic without too many headaches.\n\nFollowing from the previous section, we can see that passing functions as parameters is a powerful construct. Decorators extend this by letting us define \"function wrappers\". Consider the following code:\n\n```python\ndef do_something():\n    print(\"doing something\")\n\ndef check(function):\n    if True:\n        print(\"check complete!\")\n        return function()\n    else:\n        raise Exception()\n\nwrapped = check(do_something)\n```\n\nHere, we've defined a function that executes some code that checks some conditions before a given function is executed, and returns the function to be executed. This construct is useful, for example, if we wanted to check if a user has the necessary permissions to perform some action. Notice we get a function returned back, with all the conditions met.\n\nIn Python, we have shorthand syntax to perform this by _decorating_ the function:\n\n```python\n@check\ndef do_something():\n    print(\"doing something\")\n```\n\nIt's easy to see how powerful decorators are when we see them in action. We're gonna leave it at here for now, and we'll return to decorators when we learn about the Flask web development framework, where their use will be more apparent.\n\n---\n\n## References\n\n1. https://dbader.org/blog/python-iterators\n2. [init - Python Docs](https://docs.python.org/3.7/reference/datamodel.html#object.__init__)\n3. [len - Python Docs](https://docs.python.org/3.7/reference/datamodel.html#object.__len__)\n4. [Static Methods - Python Docs](https://docs.python.org/3.7/library/functions.html#staticmethod)\n5. [Class Methods - Python Docs](https://docs.python.org/3.7/library/functions.html#classmethod)\n6. [Copy - Python Docs](https://docs.python.org/3.7/library/copy.html#module-copy)\n7. [Positional Arguments 1 - Python Docs](https://docs.python.org/3.7/tutorial/controlflow.html#arbitrary-argument-lists)\n8. [Positional Arguments 2 - Python Docs](https://docs.python.org/3/glossary.html#term-argument)\n9. [Keyword Arguments - Python Docs](https://docs.python.org/3.7/tutorial/controlflow.html#keyword-arguments)\n10. [List Comphrensions - Python Docs](https://docs.python.org/3.7/tutorial/datastructures.html#list-comprehensions)\n11. [Generators - Python Docs](https://docs.python.org/3.7/tutorial/classes.html#generators)\n12. [Lambda Functions - Python Docs](https://docs.python.org/3.7/tutorial/controlflow.html#lambda-expressions)\n13. [Decorators - Python Docs](https://docs.python.org/3.7/glossary.html#term-decorator)\n","html":"<h1>Pythonic Programming</h1>\n<blockquote>\n<p>The \"Python\" Way of Doing Things</p>\n</blockquote>\n<p>In this lecture, we'll be tackling a variety of Python constructs that are exclusive to the language. A variety of the examples shown today might feel a little contrived, but we'll see later in the course that each and every module shown in this lecture will be either necessary for certain functionality, or just incredibly awesome syntactic sugar.</p>\n<h2>Objects</h2>\n<p>Let's start off with some core object-oriented concepts. Let's say we have a simple class definition as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sound <span class=\"token operator\">=</span> sound\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">make_sound</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sound<span class=\"token punctuation\">)</span>\n\ncow <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token string\">\"Moo\"</span><span class=\"token punctuation\">)</span>\ncow<span class=\"token punctuation\">.</span>make_sound<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>How can we extend this general class functionality into a more specific implementation?</p>\n<h3>Inheritance</h3>\n<p>We can <em>inherit</em> functionality from the parent class by passing in the parent class into the child class signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Koala</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Animal<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\"<span class=\"token operator\">*</span>loud snoring sound<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We do this by calling the <code class=\"language-text\">.__init__()</code> of the parent class within the <code class=\"language-text\">.__init__()</code> of the child. Now, we can perform behaviour specific to both the child class, and the parent class!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">human <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token string\">\"When will permits be administered?\"</span><span class=\"token punctuation\">)</span>\nhuman<span class=\"token punctuation\">.</span>make_sound<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nkoala <span class=\"token operator\">=</span> Koala<span class=\"token punctuation\">(</span><span class=\"token string\">\"screeching sound\"</span><span class=\"token punctuation\">)</span>\nkoala<span class=\"token punctuation\">.</span>make_sound<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nkoala<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But what does <code class=\"language-text\">.__init__()</code> actually do?</p>\n<h3>Magic Methods</h3>\n<p>We know <a href=\"https://docs.python.org/3.7/reference/datamodel.html#object.__init__\"><code class=\"language-text\">__init__()</code></a> as something like a constructor. But there are a varitey of other core object functionalities that can be implemented (or overridden). For example, getting the length of a list using <code class=\"language-text\">len()</code> is actually implemented on the list object using <a href=\"https://docs.python.org/3.7/reference/datamodel.html#object.__len__\"><code class=\"language-text\">__len__()</code></a>. There are a variety of ther magic methods that can be used:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sloth</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Animal<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__hang_out__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hanging out.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> Sloth<span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm A BIG SLOTH.\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"The sloth is currently unavailable.\"</span>\n\nsloth2 <span class=\"token operator\">=</span> Sloth<span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm lazy.\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sloth2<span class=\"token punctuation\">)</span>\n\nsloth3 <span class=\"token operator\">=</span> sloth2 <span class=\"token operator\">+</span> sloth2\nsloth3<span class=\"token punctuation\">.</span>make_sound<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There are dozens of magic methods, which makes sense since magic methods typically implement some core piece of Python functionality with respect to objects. Explore the magic methods and see where that takes you!</p>\n<h3>Extras: Class Methods and Static Methods</h3>\n<p>So far, we've talked about methods which relate to a specific instance. These are known as instance methods (suprise, suprise). However, there are entirely different families of functions which are defined within classes. Thinking about these can get a little abstract and paritcular, so I've decided to summarize them for you here in case you ever need to implement one of these functions. The explanation for \"decorating\" a function is a little out of order and is at the end of these notes, so return here after reading it!</p>\n<p>The first interesting family of methods are Static methods, which you may be familiar with from other languages such as Java, allow us to define functionality for a specific class that does not depend on any specific instance. To do this, we decorate a function with <a href=\"https://docs.python.org/3.7/library/functions.html#staticmethod\"><code class=\"language-text\">@staticmethod</code></a> and we can subsequently call the method using something like <code class=\"language-text\">CustomClass.static_method()</code>. Note that this is entirely different from first instantiating <code class=\"language-text\">obj = CustomClass()</code> and then calling <code class=\"language-text\">obj.static_method()</code>.</p>\n<p>Next, let's talk about Class Methods, which are functions which are decorated with <a href=\"https://docs.python.org/3.7/library/functions.html#classmethod\"><code class=\"language-text\">@classmethod</code></a>. They don't pertain to a specific instance, but instead maintain state across all instances of the class. For example, a <code class=\"language-text\">count()</code> class method can be defined to return the amount of objects that are instantiated for a given class.</p>\n<h3>Copying</h3>\n<p>Sometimes, trying to work with objects and their locations in memory can get confusing. So, Python lets you explicitly deal with these situations using the <a href=\"https://docs.python.org/3.7/library/copy.html#module-copy\"><code class=\"language-text\">copy</code></a> module. The two relevant modules can be imported by calling <code class=\"language-text\">from copy import copy, deepcopy</code>.</p>\n<p>The two relevant packages here are <code class=\"language-text\">copy</code> and <code class=\"language-text\">deepcopy</code>. Copy lets you copy the contents of an object into another object:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> copy <span class=\"token keyword\">import</span> copy\n\n<span class=\"token comment\"># initializing list 1</span>\nli1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nli2 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">(</span>li1<span class=\"token punctuation\">)</span>\n\nli1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> li2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice that editing <code class=\"language-text\">li1</code> does not change <code class=\"language-text\">li2</code>. But copying objects like this doesn't always work so cleanly. Imagine if we had <em>more objects</em> as fields in the copied object. This naive copying wouldn't update the references on those nested objects. To fix this, we need to use the <code class=\"language-text\">deepcopy</code> package, which recursively copies objects and fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> copy <span class=\"token keyword\">import</span> deepcopy\n\nli3 <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>li1<span class=\"token punctuation\">)</span>\n\nli2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nli3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> li2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> li3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>These functions can resolve a lot of headaches when working with algorithms involving duplicate (or nearly identical) data.</p>\n<h2>Functions</h2>\n<p>Recall that we can define functions using the <code class=\"language-text\">def</code> parameter, and that we're at a lot of liberty with arguments and return types:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add_two</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y</code></pre></div>\n<p>Something that's even more interesting about functions is the use of <em>positional arguments</em> and <em>keyword arguments</em>.</p>\n<h3>Positional Arguments and Args</h3>\n<p>The <a href=\"https://docs.python.org/3.7/reference/compound_stmts.html#function-definitions\">language reference</a> succinctly describes positional and keyword arguments as follows:</p>\n<blockquote>\n<p>If the form *identifier is present, it is initialized to a tuple receiving any excess positional parameters, defaulting to the empty tuple. If the form **identifier is present, it is initialized to a new dictionary receiving any excess keyword arguments, defaulting to a new empty dictionary.</p>\n</blockquote>\n<p>Sometimes, we might choose to be less explicit with our function signatures. Specifically, we can use the single asterisk <code class=\"language-text\">*</code> before a function argument to allow for a variable amount of inputs. Let's refactor our <code class=\"language-text\">add_two</code> function into <code class=\"language-text\">def add(*args)</code>.</p>\n<p>In our function definition, the multiple parameters are represented as a list:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span>\n        total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> number\n    <span class=\"token keyword\">return</span> total</code></pre></div>\n<p>Isn't that convenient? For more on positional arguments, see <a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#arbitrary-argument-lists\">here</a> and <a href=\"https://docs.python.org/3/glossary.html#term-argument\">here</a>.</p>\n<h3>Keyword Arguments and Kwargs</h3>\n<p>In Python, we can also extend argument definitions with <a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#keyword-arguments\"><em>keyword arguments</em></a>. Consider the following subtract function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y</code></pre></div>\n<p>Note that the operation is not symmetric. That is, <code class=\"language-text\">subtract(10, 5)</code> is not <code class=\"language-text\">subtract(5, 10)</code>. We can fix this by providing our arguments as keyworded arguments. In particular, we can call <code class=\"language-text\">subtract(y=5, x=10)</code> to yield the equivalent result as <code class=\"language-text\">subtract(10, 5)</code>.</p>\n<p>In fact, we can even set default parameters this way as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_error</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">=</span><span class=\"token string\">\"This is the default error message!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Our notion of <code class=\"language-text\">*args</code> to denote multiple positional arguments extends as well to keyworded arguments, which gives us <code class=\"language-text\">**kwargs</code> (with the double asterisk). In our function body this is represented as a dictionary:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_attributes</span><span class=\"token punctuation\">(</span>kind<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a \"</span><span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> attribute <span class=\"token keyword\">in</span> kwargs<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">[</span>attribute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Isn't that also convenient?</p>\n<h2>Comprehensions</h2>\n<p>Let's motivate the next few concepts by displaying more Python elegance through the <code class=\"language-text\">for</code> construct. In particular, let's think about how we can square a list of numbers. Consider the naive approach:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">old_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nnew_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> old_list<span class=\"token punctuation\">:</span>\n    new_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>number <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This looks like it should work fine, and it does! However, this idea of looping over a list to create a new list is a common paradigm in Python programming. As such, the language supports some of my favourite syntactic sugar: <a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#list-comprehensions\"><em>list comprehensions</em></a>.</p>\n<p>Let's re-write this code using a list comprehension:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">old_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nnew_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> old_list<span class=\"token punctuation\">]</span></code></pre></div>\n<p>And we're done! The general formula for a <em>list comprehension</em> is:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can selectively choose values using an <code class=\"language-text\">if</code> clause at the end of the comprehension:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\neven_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> numbers <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Comprehensions can also be applied to sets and dictionaries:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ARun\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"saIF\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KeVin\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># dictionary comprehension for lengths</span>\nname_lengths <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># set comprehension for string formatting</span>\nformatted_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As a hint, whenever we want you to implement functions in a single line, we generally want you to think about some kind of comprehension.</p>\n<h2>Iterators</h2>\n<p>So how do for loops and list comprehensions work so seamlessly? And what kinds of objects can we iterate over? Turns out, any object that implements the magic methods <code class=\"language-text\">__next__</code> and <code class=\"language-text\">__iter__</code>. So something that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">li <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>actually looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">li <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\niterator <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        item <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here's an example definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CountByOne</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> start\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        num <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>num\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> num\n\niterator <span class=\"token operator\">=</span> CountByOne<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Generators</h2>\n<p>Let's talk about some more function behaviour. We're used to functions that return a single value and terminate their execution upon returning. In Python, we can extend this idea of returning a value to <a href=\"https://docs.python.org/3.7/tutorial/classes.html#generators\"><em>generators</em></a>. Generators are functions that <code class=\"language-text\">yield</code> a value, and do not terminate upon doing so. As a result, we can declare functions that act as iterators.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">simple_yields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"only see this when yielding 2!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"only see this when yielding 3!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"only see this when yielding 4!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span>\n\ngenerator <span class=\"token operator\">=</span> simple_yields<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice this is the same thing as the iterator, but we don't need to define an iterator class, or even a <code class=\"language-text\">next</code> function!</p>\n<p>Let's now see how we can perform computation and yield results sequentially. We can implement <code class=\"language-text\">CountByOne</code> from before as a generator:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> start\n    <span class=\"token keyword\">while</span> num <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> num\n        num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\ngenerator <span class=\"token operator\">=</span> count<span class=\"token punctuation\">(</span>end<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># defines generator object</span>\n<span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> generator<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note that when calling <code class=\"language-text\">count(end=20)</code>, we are returned the generator itself and we can then iterate over the outputs of the generator. Between <code class=\"language-text\">yield</code> statements, the execution of the function is essentially stopped until the caller makes another call.</p>\n<p>We can even define generators in terms of other iterators:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">square_generator</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> i <span class=\"token operator\">**</span> <span class=\"token number\">2</span></code></pre></div>\n<p>I hope this helps you understand how for-loops work behind the scenes!</p>\n<h2>Lambda Functions</h2>\n<p>Python is an object-oriented language at its core, and that means that functions are also first-class citizens in the language. We can see this if we define a custom function <code class=\"language-text\">def foo(): pass</code> and then call <code class=\"language-text\">print(foo)</code> without brackets to start the function call.</p>\n<p>Recall the notion of anonymous functions from CIS 120. We have a similar notion in Python named <a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#lambda-expressions\"><em>lambda functions</em></a>, which unlocks functional programming paradigms in Python by letting us use <em>functions as arguments</em>.</p>\n<p>Lambda functions look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>This is a function that, as you can imagine, adds by 1. Note that lambda functions by default return the expression that is defined. This is expected behaviour in functional programming. We can apply this function directly or by giving it a name. The following function calls are equivalent</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\nadd_one <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\ny <span class=\"token operator\">=</span> add_one<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's consider sorting a list of strings by their length. In a language like Java, we would have to define a custom sorting function, or mutate the original list to include auxillary data. However, in Python, we can provide a lambda function to the <code class=\"language-text\">sorted</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Arun\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Saif\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kevin\"</span><span class=\"token punctuation\">]</span>\nsorted_names <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's disect this. The <code class=\"language-text\">key</code> parameter tells the <code class=\"language-text\">sorted</code> function what value to use for comparing elements. So, when we pass a lambda function that returns the length of the values, we get the algorithm to sort based off of length.</p>\n<p>We can also implement some classical functional programming ideas on lists such as <code class=\"language-text\">map</code> (which is sort of like a comprehension) and <code class=\"language-text\">filter</code> (which filters elements according to some function):</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\nsquares <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span>\nevents <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Lambda functions give us powerful programming capabilities.</p>\n<h2>Decorators</h2>\n<p><a href=\"https://docs.python.org/3.7/glossary.html#term-decorator\">Decorators</a> are a complex topic in Python, so we'll try to introduce the elegance of the topic without too many headaches.</p>\n<p>Following from the previous section, we can see that passing functions as parameters is a powerful construct. Decorators extend this by letting us define \"function wrappers\". Consider the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doing something\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"check complete!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nwrapped <span class=\"token operator\">=</span> check<span class=\"token punctuation\">(</span>do_something<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here, we've defined a function that executes some code that checks some conditions before a given function is executed, and returns the function to be executed. This construct is useful, for example, if we wanted to check if a user has the necessary permissions to perform some action. Notice we get a function returned back, with all the conditions met.</p>\n<p>In Python, we have shorthand syntax to perform this by <em>decorating</em> the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@check</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doing something\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It's easy to see how powerful decorators are when we see them in action. We're gonna leave it at here for now, and we'll return to decorators when we learn about the Flask web development framework, where their use will be more apparent.</p>\n<hr>\n<h2>References</h2>\n<ol>\n<li><a href=\"https://dbader.org/blog/python-iterators\">https://dbader.org/blog/python-iterators</a></li>\n<li><a href=\"https://docs.python.org/3.7/reference/datamodel.html#object.__init__\">init - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/reference/datamodel.html#object.__len__\">len - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/library/functions.html#staticmethod\">Static Methods - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/library/functions.html#classmethod\">Class Methods - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/library/copy.html#module-copy\">Copy - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#arbitrary-argument-lists\">Positional Arguments 1 - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3/glossary.html#term-argument\">Positional Arguments 2 - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#keyword-arguments\">Keyword Arguments - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/datastructures.html#list-comprehensions\">List Comphrensions - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/classes.html#generators\">Generators - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/tutorial/controlflow.html#lambda-expressions\">Lambda Functions - Python Docs</a></li>\n<li><a href=\"https://docs.python.org/3.7/glossary.html#term-decorator\">Decorators - Python Docs</a></li>\n</ol>"}},"pageContext":{"pathSlug":"/pythonic"}},"staticQueryHashes":[]}