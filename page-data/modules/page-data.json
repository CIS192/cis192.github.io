{"componentChunkName":"component---src-templates-blog-post-js","path":"/modules","result":{"data":{"markdownRemark":{"rawMarkdownBody":"\n# Exceptions, Breakpoints, Modules, and Files\n\n> Disclaimer: these notes are a work in progress\n\nIn this section, we're going to progress from Python-specific functionality back to familiar paradigms and modules from other languages. The goal for this lecture is to build the foundations to work on larger software projects that you might not be used to (since coursework and problem sets tend to be a little smaller in nature).\n\n\n## Exceptions\n\nSometimes, things go wrong. We can preemptively catch these errors using a `try` and `except` block (similar to the `try` and `catch` paradigm from Java), whenever we anticipate run-time errors:\n\n```python\n# we can condition on certain errors!\nwhile True:\n    try:\n        # x = int(input(\"Please enter a number: \"))\n        break\n    except ValueError:\n        print(\"Oops!  That was no valid number.  Try again...\")\n    except (RuntimeError, TypeError, NameError):\n        print(\"something weird happened!\")\n    except:\n        print(\"i dont know what you did but i dont like it\")\n```\n\nWe can even define custom exceptions by defining a base class that inherits from the `Exception` class, and then a child class that inherits from our defined `Error` class:\n\n```python\n# we can also create our own exceptions!\nclass Error(Exception):\n    \"\"\"Base class for exceptions in this module.\"\"\"\n    pass\n\n\nclass InputError(Error):\n    \"\"\"Exception raised for errors in the input.\n\n    Attributes:\n        expression -- input expression in which the error occurred\n        message -- explanation of the error\n    \"\"\"\n\n    def __init__(self, expression, message):\n        self.expression = expression\n        self.message = message\n\n# DO SOMETHING BAD!\n# PROGRAM CAUGHT THAT!\nraise InputError(\"you did something bad\", \"fix it!\")\n```\n\nNote that the `raise` keyword allows us to programmatically trigger an error, which can be caught with a `try` and `except` block (or crash the program altogether).\n\n\n## Breakpoints\n\nAnother handy Python tool is to use `breakpoint` to halt execution of a Python program *at the current program state*. This is super useful for quickly debugging behaviour, or to have a convinient sandbox for prototyping function calls.\n\nFor example, we can add a `breakpoint()` statement to the body of an `except` block, so that if  we encounter an error, we can quickly debug the error:\n\n```python\nresponse = input(\"What is your age?\")\n\ntry:\n    age = int(response)\nexcept:\n    breakpoint()\n```\n\nIf we were to input a string (intead of an integer), we would hit the `except` block and the breakpoint would activate, launching us into the Python debugger at the current program state. More information about `breakpoint` can be found in the [official PEP specification](https://www.python.org/dev/peps/pep-0553/).\n\n\n## Modules\n\nSometimes, we want to _modularize_ our codebase into seperate components that can interact with each other. This is a good way to not only organize our codebase more logically, but also enable the possibility of us releasing *standalone* libraries that other developers can utilize. This idea of abstraction and modularization is what enables significant programming paradigms, like the open source movement.\n\n\n### Importing Modules\n\nIf you recall from earlier in the course, we sometimes relied on functions that weren't part of the vanilla Python experience (e.g. `defaultdict` and `copy`) by `import`-ing them.\n\nAs a refresher, we can import entire modules using `import xyz` or we can import submodules using `from xyz import abc`. For example, we can import the `random` module (which is a first-party module, and included with every Python installation):\n\n```python\nimport random\n```\n\nOr if we just want a specific functionality from the module, we can use `from`:\n\n```python\nfrom random import choice\n```\n\nThis gives us only the `choice` method, instead of importing the entire (possibly bukly) `random` module.\n\n### Defining Third-Party Modules\n\nThe Python packages we `import` from the standard library (or the internet from `pip`), follows the same convention as importing a local module (i.e. one we write ourselves).\n\nIf we write a function named `function` in another file named `script.py`, we can first import our custom script using `import script`, and later call `script.function()` (this is because even modules are considered objects in Python). We can also directly import the function by calling `from script import function`.\n\nWhat if `script.py` exists in another directory, say a folder named `folder/`? To import this module, we follow the same steps as before, but we also add an empty `__init__.py` file in `folder/`. This allows the folder to be viewed as a Python module, so we can import it as `from folder.script import function`.\n\n## Files\n\nSometimes, we want to leverage information from the _outside world_ (or in other words, or local file system) that exists beyond the scope of Python program. Anything from selfie pictures to legal transcripts is fair game in Python!\n\nFor the sake of simplicity, let's work with simple `.txt` files, which gives us raw text. In theory, this is all we need to build higher level abstractions and data, so this code will generalize to different formats (images, csv, tsv etc.). Let's create a dummy text file in `names.txt` containing:\n\n```\nArun\nSumit\nJorge\nTony\n```\n\n### Reading From Files\n\nReading from this file is (un)suprisingly easy in Python:\n\n```python\nwith open('names.txt') as f:\n    content = f.read()\n```\n\nThe `open()` makes intuitive sense to \"open\" the file provided. A gotcha is to make sure whether you are using a relative or absolute path -- depending on your Python/environment configuration, only one may be supported.\n\nWe can now split the names on its `\\n` values by doing `content.split('\\n')`, or we can simply call `f.readlines()` to have Python do it for us! In general the `split()` command is an extremely useful string command for working with real world textual data.\n\n### Writing To Files\n\nWriting to a file is also rather easy in Python:\n\n```python\nwith open('names.txt', 'w') as f:\n    for name in names:\n        f.write(name + '\\n')\n```\n\nNotice we pass in the `'w'` argument (known as a *mode*) to the `open` function. This is because depending on what we want to do with the file, we need to be *safe* in specifying whether we are reading or writing to the file. By default, Python assumes we are reading (hence the lack of a mode in the reading example). However, we can even specify the `'a'` mode (short for *\"append\"*) so the Python file reference knows to start the cursor at the end of the file, instead of overwriting the file altogether.\n\n### Pickle\n\nIn the previous section, we worked with a `.txt` file since a list of names is a rather bare-bones data format. However, what if we wanted to save more advanced data structures (e.g. `list`, 'dict', custom objects) to the file system? We could figure out how to serialize it ourselves into a `.txt` format, but that's a lot of work and we're lazy (at least I am).\n\nWe actually have a very Python-object friendly module that does exactly this called `pickle`! The goal of this module is to provide Python-specific object serialization to the file system, which is very convinient for working with Python objects.\n\nWe can write to a Pickle file in a similar way:\n\n```python\nimport pickle\n\nscores = {'Arun': 60, 'Jorge': 80, 'Tony': 100, 'Sumit': 100}\n\nwith open('scores.p', 'wb') as f:\n    pickle.dump(scores, f)\n```\n\nNotice the `'wb'` flag, indicating that we are *writing bytes* directly to the file.\n\nSimilarly, we can read from a pickled file like so:\n\n```python\nwith open('scores.p', 'rb') as f:\n    pickle.load(scores, f)\n```\n\n## Conclusion\n\nThis lecture is about laying the foundations for some very useful programming skills that we will make use of later in the course (and hopefully in your career). A lot of these tools aren't necessary per se, but are crucial for building feature-filled and robust code bases.","html":"<h1>Exceptions, Breakpoints, Modules, and Files</h1>\n<blockquote>\n<p>Disclaimer: these notes are a work in progress</p>\n</blockquote>\n<p>In this section, we're going to progress from Python-specific functionality back to familiar paradigms and modules from other languages. The goal for this lecture is to build the foundations to work on larger software projects that you might not be used to (since coursework and problem sets tend to be a little smaller in nature).</p>\n<h2>Exceptions</h2>\n<p>Sometimes, things go wrong. We can preemptively catch these errors using a <code class=\"language-text\">try</code> and <code class=\"language-text\">except</code> block (similar to the <code class=\"language-text\">try</code> and <code class=\"language-text\">catch</code> paradigm from Java), whenever we anticipate run-time errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># we can condition on certain errors!</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># x = int(input(\"Please enter a number: \"))</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops!  That was no valid number.  Try again...\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>RuntimeError<span class=\"token punctuation\">,</span> TypeError<span class=\"token punctuation\">,</span> NameError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something weird happened!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i dont know what you did but i dont like it\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can even define custom exceptions by defining a base class that inherits from the <code class=\"language-text\">Exception</code> class, and then a child class that inherits from our defined <code class=\"language-text\">Error</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># we can also create our own exceptions!</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Base class for exceptions in this module.\"\"\"</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">InputError</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Exception raised for errors in the input.\n\n    Attributes:\n        expression -- input expression in which the error occurred\n        message -- explanation of the error\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> expression<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>expression <span class=\"token operator\">=</span> expression\n        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message\n\n<span class=\"token comment\"># DO SOMETHING BAD!</span>\n<span class=\"token comment\"># PROGRAM CAUGHT THAT!</span>\n<span class=\"token keyword\">raise</span> InputError<span class=\"token punctuation\">(</span><span class=\"token string\">\"you did something bad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fix it!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note that the <code class=\"language-text\">raise</code> keyword allows us to programmatically trigger an error, which can be caught with a <code class=\"language-text\">try</code> and <code class=\"language-text\">except</code> block (or crash the program altogether).</p>\n<h2>Breakpoints</h2>\n<p>Another handy Python tool is to use <code class=\"language-text\">breakpoint</code> to halt execution of a Python program <em>at the current program state</em>. This is super useful for quickly debugging behaviour, or to have a convinient sandbox for prototyping function calls.</p>\n<p>For example, we can add a <code class=\"language-text\">breakpoint()</code> statement to the body of an <code class=\"language-text\">except</code> block, so that if  we encounter an error, we can quickly debug the error:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">response <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What is your age?\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    age <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    breakpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If we were to input a string (intead of an integer), we would hit the <code class=\"language-text\">except</code> block and the breakpoint would activate, launching us into the Python debugger at the current program state. More information about <code class=\"language-text\">breakpoint</code> can be found in the <a href=\"https://www.python.org/dev/peps/pep-0553/\">official PEP specification</a>.</p>\n<h2>Modules</h2>\n<p>Sometimes, we want to <em>modularize</em> our codebase into seperate components that can interact with each other. This is a good way to not only organize our codebase more logically, but also enable the possibility of us releasing <em>standalone</em> libraries that other developers can utilize. This idea of abstraction and modularization is what enables significant programming paradigms, like the open source movement.</p>\n<h3>Importing Modules</h3>\n<p>If you recall from earlier in the course, we sometimes relied on functions that weren't part of the vanilla Python experience (e.g. <code class=\"language-text\">defaultdict</code> and <code class=\"language-text\">copy</code>) by <code class=\"language-text\">import</code>-ing them.</p>\n<p>As a refresher, we can import entire modules using <code class=\"language-text\">import xyz</code> or we can import submodules using <code class=\"language-text\">from xyz import abc</code>. For example, we can import the <code class=\"language-text\">random</code> module (which is a first-party module, and included with every Python installation):</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random</code></pre></div>\n<p>Or if we just want a specific functionality from the module, we can use <code class=\"language-text\">from</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> choice</code></pre></div>\n<p>This gives us only the <code class=\"language-text\">choice</code> method, instead of importing the entire (possibly bukly) <code class=\"language-text\">random</code> module.</p>\n<h3>Defining Third-Party Modules</h3>\n<p>The Python packages we <code class=\"language-text\">import</code> from the standard library (or the internet from <code class=\"language-text\">pip</code>), follows the same convention as importing a local module (i.e. one we write ourselves).</p>\n<p>If we write a function named <code class=\"language-text\">function</code> in another file named <code class=\"language-text\">script.py</code>, we can first import our custom script using <code class=\"language-text\">import script</code>, and later call <code class=\"language-text\">script.function()</code> (this is because even modules are considered objects in Python). We can also directly import the function by calling <code class=\"language-text\">from script import function</code>.</p>\n<p>What if <code class=\"language-text\">script.py</code> exists in another directory, say a folder named <code class=\"language-text\">folder/</code>? To import this module, we follow the same steps as before, but we also add an empty <code class=\"language-text\">__init__.py</code> file in <code class=\"language-text\">folder/</code>. This allows the folder to be viewed as a Python module, so we can import it as <code class=\"language-text\">from folder.script import function</code>.</p>\n<h2>Files</h2>\n<p>Sometimes, we want to leverage information from the <em>outside world</em> (or in other words, or local file system) that exists beyond the scope of Python program. Anything from selfie pictures to legal transcripts is fair game in Python!</p>\n<p>For the sake of simplicity, let's work with simple <code class=\"language-text\">.txt</code> files, which gives us raw text. In theory, this is all we need to build higher level abstractions and data, so this code will generalize to different formats (images, csv, tsv etc.). Let's create a dummy text file in <code class=\"language-text\">names.txt</code> containing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Arun\nSumit\nJorge\nTony</code></pre></div>\n<h3>Reading From Files</h3>\n<p>Reading from this file is (un)suprisingly easy in Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'names.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    content <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">open()</code> makes intuitive sense to \"open\" the file provided. A gotcha is to make sure whether you are using a relative or absolute path -- depending on your Python/environment configuration, only one may be supported.</p>\n<p>We can now split the names on its <code class=\"language-text\">\\n</code> values by doing <code class=\"language-text\">content.split(&#39;\\n&#39;)</code>, or we can simply call <code class=\"language-text\">f.readlines()</code> to have Python do it for us! In general the <code class=\"language-text\">split()</code> command is an extremely useful string command for working with real world textual data.</p>\n<h3>Writing To Files</h3>\n<p>Writing to a file is also rather easy in Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'names.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice we pass in the <code class=\"language-text\">&#39;w&#39;</code> argument (known as a <em>mode</em>) to the <code class=\"language-text\">open</code> function. This is because depending on what we want to do with the file, we need to be <em>safe</em> in specifying whether we are reading or writing to the file. By default, Python assumes we are reading (hence the lack of a mode in the reading example). However, we can even specify the <code class=\"language-text\">&#39;a&#39;</code> mode (short for <em>\"append\"</em>) so the Python file reference knows to start the cursor at the end of the file, instead of overwriting the file altogether.</p>\n<h3>Pickle</h3>\n<p>In the previous section, we worked with a <code class=\"language-text\">.txt</code> file since a list of names is a rather bare-bones data format. However, what if we wanted to save more advanced data structures (e.g. <code class=\"language-text\">list</code>, 'dict', custom objects) to the file system? We could figure out how to serialize it ourselves into a <code class=\"language-text\">.txt</code> format, but that's a lot of work and we're lazy (at least I am).</p>\n<p>We actually have a very Python-object friendly module that does exactly this called <code class=\"language-text\">pickle</code>! The goal of this module is to provide Python-specific object serialization to the file system, which is very convinient for working with Python objects.</p>\n<p>We can write to a Pickle file in a similar way:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Arun'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jorge'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tony'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sumit'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scores.p'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice the <code class=\"language-text\">&#39;wb&#39;</code> flag, indicating that we are <em>writing bytes</em> directly to the file.</p>\n<p>Similarly, we can read from a pickled file like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scores.p'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>This lecture is about laying the foundations for some very useful programming skills that we will make use of later in the course (and hopefully in your career). A lot of these tools aren't necessary per se, but are crucial for building feature-filled and robust code bases.</p>"}},"pageContext":{"pathSlug":"/modules"}},"staticQueryHashes":[]}